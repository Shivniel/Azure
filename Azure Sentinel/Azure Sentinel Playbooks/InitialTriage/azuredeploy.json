{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
    "comments" : "Azure Sentinel playbook to automate the initial incident response",
	"author": "Shivniel Gounder"
    },
    "parameters": {
	    "PlaybookName": {
            "defaultValue": "InitialTriage",
            "type": "string"
		
        },
        "HyrbidAnalysisAPI": {
            "defaultValue": "00000000-0000-0000-0000-000000000000",
            "type": "string"  

        },
        "HIBPAPI": {
        "defaultValue": "00000000-0000-0000-0000-000000000000",
        "type": "string"  

        },
        "DeployUserName": {
            "defaultValue": "<username>@<domain>",
            "type": "string"
        },
        "SOCEmailAddress": {
            "defaultValue": "soc@domain.com",
            "type": "string"
        },
        "SentinelRG": {
        "defaultValue": "SentinelRG",
        "type": "string"
		},
	    "SentinelWSName": {
            "defaultValue": "SentinelWSName",
            "type": "string"
		},
		"SentinelSubID": {
            "defaultValue": "00000000-0000-0000-0000-000000000000",
            "type": "string"			
        }
    },
    "variables": {
        "AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]",
        "AzureMonitorConnectionName": "[concat('azuremonitorlogs-', parameters('PlaybookName'))]",
        "Office365ConnectionName": "[concat('office365-', parameters('PlaybookName'))]"
    },
"resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('DeployUserName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        },
                {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureMonitorConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('DeployUserName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                }
            }
        },
            {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Office365ConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('DeployUserName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                }
            }
            }, 
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            			"tags": {
                "LogicAppsCategory": "security"
            },
			"dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureMonitorConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('Office365ConnectionName'))]"
            ],
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_Azure_Sentinel_incident_creation_rule_was_triggered_(Private_Preview_only)": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "EmailApprovalCondition": {
                            "actions": {
                                "Add_comment_to_incident_(V3)": {
                                    "runAfter": {
                                        "Update_incident": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@body('Update_incident')?['id']",
                                            "message": "<p>Azure Sentinel Alert:<br>\n<br>\nTItle: @{triggerBody()?['object']?['properties']?['title']}<br>\n<br>\nDescription: @{triggerBody()?['object']?['properties']?['description']}<br>\n<br>\nAccount Name: @{variables('AccountName')}<br>\n<br>\nStatus: @{triggerBody()?['object']?['properties']?['status']}<br>\n<br>\nAzure Sentinel ID: @{triggerBody()?['object']?['properties']?['incidentNumber']}<br>\n<br>\nDate (NZT): @{convertFromUtc(triggerBody()?['object']?['properties']?['createdTimeUtc'], 'New Zealand Standard Time', 'dd MMMM yyyy')}<br>\n<br>\nTime (NZT - 24H): @{convertFromUtc(triggerBody()?['object']?['properties']?['createdTimeUtc'], 'New Zealand Standard Time', 'HH:mm')}<br>\n<br>\nHIBP Result: @{variables('HIBPResult')}<br>\n<br>\nIP Health Score: <br>\n<br>\nIP: &nbsp;@{variables('IP')}<br>\n<br>\nIs IP Malicious: @{variables('IsIPMalicious')}<br>\n<br>\nIP AV Detect Rate: @{variables('IPAVDetect')}<br>\n<br>\nNumber of times the given IP address was found in the previous Alerts: @{variables('SecurityAlertCount')} events.<br>\n<br>\nNumber of times the given IP address was found in the sign-in logs: <br>\n@{variables('OccurrencesInSignins')} events.<br>\n<br>\nSentinel Entity Behavior Analytics (Incident Count, Alert Count, Anomaly Count) :<br>\n@{variables('UEBAResults')}</p>"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Update_incident": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "classification": {
                                                "ClassificationAndReason": "Benign Positive - Suspicious But Expected"
                                            },
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "status": "Closed",
                                            "tagsToAdd": {
                                                "TagsToAdd": [
                                                    {
                                                        "Tag": "Sentinel_Automation"
                                                    }
                                                ]
                                            }
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "put",
                                        "path": "/Incidents"
                                    }
                                }
                            },
                            "runAfter": {
                                "Send_approval_email": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Add_comment_to_incident_(V3)_2": {
                                        "runAfter": {},
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "body": {
                                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                                "message": "<p>Azure Sentinel Alert:<br>\n<br>\nTItle: @{triggerBody()?['object']?['properties']?['title']}<br>\n<br>\nDescription: @{triggerBody()?['object']?['properties']?['description']}<br>\n<br>\nAccount Name: @{variables('AccountName')}<br>\n<br>\nStatus: @{triggerBody()?['object']?['properties']?['status']}<br>\n<br>\nAzure Sentinel ID: @{triggerBody()?['object']?['properties']?['incidentNumber']}<br>\nDate (NZT): @{convertFromUtc(triggerBody()?['object']?['properties']?['createdTimeUtc'], 'New Zealand Standard Time', 'dd MMMM yyyy')}<br>\n<br>\nTime (NZT - 24H): @{convertFromUtc(triggerBody()?['object']?['properties']?['createdTimeUtc'], 'New Zealand Standard Time', 'HH:mm')}<br>\n<br>\nHIBP Result: @{variables('HIBPResult')}<br>\n<br>\nIP Health Score: <br>\n<br>\nIP: &nbsp;@{variables('IP')}<br>\n<br>\nIs IP Malicious: @{variables('IsIPMalicious')}<br>\n<br>\nIP AV Detect Rate: @{variables('IPAVDetect')}<br>\n<br>\nNumber of times the given IP address was found in the previous Alerts: @{variables('SecurityAlertCount')} events.<br>\n<br>\nNumber of times the given IP address was found in the sign-in logs: <br>\n@{variables('OccurrencesInSignins')} events.<br>\n<br>\nSentinel Entity Behavior Analytics (Incident Count, Alert Count, Anomaly Count) :<br>\n@{variables('UEBAResults')}</p>"
                                            },
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "path": "/Incidents/Comment"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@body('Send_approval_email')?['SelectedOption']",
                                            "Approve"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Entities_-_Get_Accounts": {
                            "runAfter": {
                                "Get-Incident": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/account"
                            }
                        },
                        "Entities_-_Get_IPs": {
                            "runAfter": {
                                "Entities_-_Get_Accounts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/ip"
                            }
                        },
                        "Get-Incident": {
                            "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
                            "actions": {
                                "Alert_-_Get_incident": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/Incidents/subscriptions/@{encodeURIComponent(triggerBody()?['workspaceInfo']?['SubscriptionId'])}/resourceGroups/@{encodeURIComponent(triggerBody()?['workspaceInfo']?['ResourceGroupName'])}/workspaces/@{encodeURIComponent(triggerBody()?['workspaceId'])}/alerts/@{encodeURIComponent(items('Get-Incident')?['properties']?['systemAlertId'])}"
                                    }
                                }
                            },
                            "runAfter": {},
                            "type": "Foreach"
                        },
                        "HAIPCheck": {
                            "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Condition_2": {
                                            "actions": {
                                                "SetAVDetectRate": {
                                                    "foreach": "@body('HAIPJSON')?['response']?['result']",
                                                    "actions": {
                                                        "Set-AVDetectRate": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "IPAVDetect",
                                                                "value": "@{items('SetAVDetectRate')?['avdetect']}"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "SetHAIPVerdict": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Foreach"
                                                },
                                                "SetHAIPVerdict": {
                                                    "foreach": "@body('HAIPJSON')?['response']?['result']",
                                                    "actions": {
                                                        "Set-HAIPVerdict": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "IsIPMalicious",
                                                                "value": "@items('SetHAIPVerdict')?['verdict']"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {},
                                                    "type": "Foreach"
                                                }
                                            },
                                            "runAfter": {
                                                "HAIPJSON": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "CleanIPMalicious": {
                                                        "runAfter": {},
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "IsIPMalicious",
                                                            "value": "Clean"
                                                        }
                                                    },
                                                    "CleanIPVerdict": {
                                                        "runAfter": {
                                                            "CleanIPMalicious": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "IPAVDetect",
                                                            "value": "Clean"
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@body('HAIPJSON')?['response_code']",
                                                                0
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "HAIPJSON": {
                                            "runAfter": {},
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP')",
                                                "schema": {
                                                    "properties": {
                                                        "response": {
                                                            "properties": {
                                                                "query": {
                                                                    "type": "string"
                                                                },
                                                                "result": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "avdetect": {
                                                                                "type": "integer"
                                                                            },
                                                                            "environmentDescription": {
                                                                                "type": "string"
                                                                            },
                                                                            "environmentId": {
                                                                                "type": "string"
                                                                            },
                                                                            "sha256": {
                                                                                "type": "string"
                                                                            },
                                                                            "size": {
                                                                                "type": "integer"
                                                                            },
                                                                            "start_time": {
                                                                                "type": "string"
                                                                            },
                                                                            "submitname": {
                                                                                "type": "string"
                                                                            },
                                                                            "threatscore": {
                                                                                "type": "integer"
                                                                            },
                                                                            "type_short": {
                                                                                "type": "string"
                                                                            },
                                                                            "verdict": {
                                                                                "type": "string"
                                                                            },
                                                                            "vxfamily": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "verdict",
                                                                            "avdetect",
                                                                            "threatscore",
                                                                            "vxfamily",
                                                                            "environmentDescription",
                                                                            "environmentId",
                                                                            "sha256",
                                                                            "size",
                                                                            "start_time",
                                                                            "submitname",
                                                                            "type_short"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "response_code": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "HTTP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('HTTP')['statusCode']",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "HTTP": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "api-key": "@variables('HAAPI')",
                                            "user-agent": "Falcon Sandbox"
                                        },
                                        "method": "GET",
                                        "uri": "https://www.hybrid-analysis.com/api/search?query=host:@{items('HAIPCheck')?['Address']}"
                                    }
                                }
                            },
                            "runAfter": {
                                "SetIP": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "HIBP": {
                            "runAfter": {
                                "IdentifyIPOccurenceSignInLogs-5Days": [
                                    "Succeeded",
                                    "Failed",
                                    "Skipped",
                                    "TimedOut"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "headers": {
                                    "hibp-api-key": "@variables('HIBPAPI')"
                                },
                                "method": "GET",
                                "uri": "https://haveibeenpwned.com/api/v3/breachedaccount/@{variables('AccountName')}"
                            }
                        },
                        "HIBPStatusCodeCondition": {
                            "actions": {
                                "SetHIBPClean": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "HIBPResult",
                                        "value": "Clean"
                                    }
                                }
                            },
                            "runAfter": {
                                "SetHIBPStatusCode": [
                                    "Succeeded",
                                    "Failed",
                                    "Skipped",
                                    "TimedOut"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "SetHIBPCompromised": {
                                        "runAfter": {},
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "HIBPResult",
                                            "value": "Compromised"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@outputs('HIBP')['statusCode']",
                                                404
                                            ]
                                        }
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "IdentifyIPOccurenceSecurityAlerts-10Days": {
                            "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                            "actions": {
                                "IdentifyIPOccurenceSecurityAlerts-JSON": {
                                    "runAfter": {
                                        "Run_query_and_list_results": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Run_query_and_list_results')?['value']",
                                        "schema": {
                                            "items": {
                                                "properties": {
                                                    "count_": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "count_"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    }
                                },
                                "Run_query_and_list_results": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "SecurityAlert\n| where Entities contains \"@{items('IdentifyIPOccurenceSecurityAlerts-10Days')?['Address']}\"\n| summarize count()",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/queryData",
                                        "queries": {
                                        "resourcegroups": "[parameters('SentinelRG')]",
                                        "resourcename": "[parameters('SentinelWSName')]",
                                        "resourcetype": "Log Analytics Workspace",
                                        "subscriptions": "[parameters('SentinelSubID')]",
                                            "timerange": "ago(10d)"
                                        }
                                    }
                                },
                                "SetSecurityAlertCount": {
                                    "foreach": "@body('IdentifyIPOccurenceSecurityAlerts-JSON')",
                                    "actions": {
                                        "Set-SecurityAlertCount": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "SecurityAlertCount",
                                                "value": "@{items('SetSecurityAlertCount')['count_']}"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "IdentifyIPOccurenceSecurityAlerts-JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                }
                            },
                            "runAfter": {
                                "HAIPCheck": [
                                    "Succeeded",
                                    "Failed",
                                    "Skipped",
                                    "TimedOut"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "IdentifyIPOccurenceSignInLogs-5Days": {
                            "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                            "actions": {
                                "IdentifyIPOccurenceSignInLogsJSON": {
                                    "runAfter": {
                                        "Run_query_and_list_results_2": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Run_query_and_list_results_2')?['value']",
                                        "schema": {
                                            "items": {
                                                "properties": {
                                                    "count_": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "count_"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    }
                                },
                                "Run_query_and_list_results_2": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "SigninLogs\n| where IPAddress == \"@{items('IdentifyIPOccurenceSignInLogs-5Days')?['Address']}\"\n| summarize count()",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/queryData",
                                        "queries": {
                                        "resourcegroups": "[parameters('SentinelRG')]",
                                        "resourcename": "[parameters('SentinelWSName')]",
                                        "resourcetype": "Log Analytics Workspace",
                                        "subscriptions": "[parameters('SentinelSubID')]",
                                            "timerange": "ago(5d)"
                                        }
                                    }
                                },
                                "SetOccurenceInSignIns": {
                                    "foreach": "@body('IdentifyIPOccurenceSignInLogsJSON')",
                                    "actions": {
                                        "Set-OccurenceInSignIns": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "OccurrencesInSignins",
                                                "value": "@{items('SetOccurenceInSignIns')['count_']}"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "IdentifyIPOccurenceSignInLogsJSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                }
                            },
                            "runAfter": {
                                "IdentifyIPOccurenceSecurityAlerts-10Days": [
                                    "Succeeded",
                                    "Failed",
                                    "Skipped",
                                    "TimedOut"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "InitializeAccountName": {
                            "runAfter": {
                                "InitializeIP": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "AccountName",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "InitializeHAAPI": {
                            "runAfter": {
                                "SetAccountName": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "HAAPI",
                                        "type": "string",
                                        "value": "[parameters('HyrbidAnalysisAPI')]"
                                    }
                                ]
                            }
                        },
                        "InitializeHIBPAPI": {
                            "runAfter": {
                                "InitializeIPAVDetect": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "HIBPAPI",
                                        "type": "string",
                                        "value": "[parameters('HIBPAPI')]"
                                    }
                                ]
                            }
                        },
                        "InitializeHIBPResult": {
                            "runAfter": {
                                "InitializeHIBPStatusCode": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "HIBPResult",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "InitializeHIBPStatusCode": {
                            "runAfter": {
                                "InitializeHIBPAPI": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "HIBPStatusCode",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "InitializeIP": {
                            "runAfter": {
                                "Entities_-_Get_IPs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "IP",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "InitializeIPAVDetect": {
                            "runAfter": {
                                "InitializeIsIPMalicious": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "IPAVDetect",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "InitializeIsIPMalicious": {
                            "runAfter": {
                                "InitializeHAAPI": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "IsIPMalicious",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "InitializeOccurrencesInSignins": {
                            "runAfter": {
                                "InitializeSecurityAlertCount": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "OccurrencesInSignins",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "InitializeSecurityAlertCount": {
                            "runAfter": {
                                "InitializeHIBPResult": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "SecurityAlertCount",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "InitializeTotalOccurrences": {
                            "runAfter": {
                                "InitializeOccurrencesInSignins": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "TotalOccurrences",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "InitializeUEBAResults": {
                            "runAfter": {
                                "InitializeTotalOccurrences": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "UEBAResults",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Run_query_and_visualize_results_-_UEBA_Analysis": {
                            "runAfter": {
                                "InitializeUEBAResults": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "let AnomalousSigninActivity = BehaviorAnalytics\n    | where TimeGenerated > ago(28d)\n    | where ActionType == \"Sign-in\"\n\t| where (UsersInsights.NewAccount == True or UsersInsights.DormantAccount == True) and (\n        ActivityInsights.FirstTimeUserAccessedResource == True and ActivityInsights.ResourceUncommonlyAccessedAmongPeers == True\n        or ActivityInsights.FirstTimeUserUsedApp == True and ActivityInsights.AppUncommonlyUsedAmongPeers == False)\n    | join (\n        SigninLogs\n        | where TimeGenerated > ago(28d)\n        | where Status.errorCode == 0 or Status.errorCode == 0 and RiskDetail != \"none\"\n        )\n        on $left.SourceRecordId == $right._ItemId\n    | extend UserPrincipalName = iff(UserPrincipalName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserPrincipalName),\n        UserName = iff(UserName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserName)\n    | extend AnomalyName = \"Anomalous Successful Logon\",\n        Tactic = \"Persistence\",\n        Technique = \"Valid Accounts\",\n        SubTechnique = \"\",\n        Description = \"Successful Sign-in with one or more of the following indications: sign by new or recently dormant accounts and sign in with resource for the first time (while none of their peers did) or to an app for the first time (while none of their peers did) or performed by a user with Risk indicaiton from AAD\"\n    | project TimeGenerated, AnomalyName, Tactic, Technique, SubTechnique, Description, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"Evidence\"]=ActivityInsights, ResourceDisplayName, AppDisplayName, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, [\"Anomaly Score\"]=InvestigationPriority; \nlet critical = dynamic(['9b895d92-2cd3-44c7-9d02-a6ac2d5ea5c3', 'c4e39bd9-1100-46d3-8c65-fb160da0071f', '158c047a-c907-4556-b7ef-446551a6b5f7', '62e90394-69f5-4237-9190-012177145e10', 'd29b2b05-8046-44ba-8758-1e26182fcf32', '729827e3-9c14-49f7-bb1b-9608f156bbb8', '966707d0-3269-4727-9be2-8c3a10f19b9d', '194ae4cb-b126-40b2-bd5b-6091b380977d', 'fe930be7-5e62-47db-91af-98c3a49a38b1']);\nlet high = dynamic(['cf1c38e5-3621-4004-a7cb-879624dced7c', '7495fdc4-34c4-4d15-a289-98788ce399fd', 'aaf43236-0c0d-4d5f-883a-6955382ac081', '3edaf663-341e-4475-9f94-5c398ef6c070', '7698a772-787b-4ac8-901f-60d6b08affd2', 'b1be1c3e-b65d-4f19-8427-f6fa0d97feb9', '9f06204d-73c1-4d4c-880a-6edb90606fd8', '29232cdf-9323-42fd-ade2-1d097af3e4de', 'be2f45a1-457d-42af-a067-6ec1fa63bc45', '7be44c8a-adaf-4e2a-84d6-ab2649e08a13', 'e8611ab8-c189-46e8-94e1-60213ab1f814']);\nlet AnomalousRoleAssignment = AuditLogs\n    | where TimeGenerated > ago(28d)\n    | where OperationName == \"Add member to role\"\n    | mv-expand TargetResources\n    | extend RoleId = tostring(TargetResources.modifiedProperties[0].newValue)\n    | where isnotempty(RoleId) and RoleId in (critical, high)\n    | extend RoleName = tostring(TargetResources.modifiedProperties[1].newValue)\n    | where isnotempty(RoleName)\n    | extend TargetId = tostring(TargetResources.id)\n    | extend Target = tostring(TargetResources.userPrincipalName)\n    | join kind=inner (BehaviorAnalytics\n        | where TimeGenerated > ago(28d)\n        | where ActionType == \"Add member to role\"\n        | where UsersInsights.BlasrRadius == \"High\" or ActivityInsights.FirstTimeUserPerformedAction == true\n        )\n        on $left._ItemId == $right.SourceRecordId\n    | extend AnomalyName = \"Anomalous Role Assignemt\",\n        Tactic = \"Persistence\",\n        Technique = \"Account Manipulation\",\n        SubTechnique = \"\",\n        Description = \"Adversaries may manipulate accounts to maintain access to victim systems. These actions include adding new accounts to high privilleged groups. Dragonfly 2.0, for example, added newly created accounts to the administrators group to maintain elevated access.  The query below generates an output of all high Blast Radius users performing Add member to priveleged role, or ones that add users for the first time.\"\n    | project TimeGenerated, AnomalyName, Tactic, Technique, SubTechnique, Description, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"TargetUser\"]=Target, RoleName, [\"Evidence\"]=ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, [\"Anomaly Score\"]=InvestigationPriority;\nlet LogOns=materialize(\n    BehaviorAnalytics\n    | where TimeGenerated > ago(28d)\n    | where ActivityType == \"LogOn\");\nlet AnomalousResourceAccess = LogOns\n    | where ActionType == \"ResourceAccess\"\n    | where ActivityInsights.FirstTimeUserLoggedOnToDevice == true\n    | extend AnomalyName = \"Anomalous Resource Access\",\n        Tactic = \"Lateral Movement\",\n        Technique = \"\",\n        SubTechnique = \"\",\n        Description = \"Adversary may be trying to move through the environment. APT29 and APT32, for example, has used PtH & PtT techniques to lateral move around the network. The query below generates an output of all users performing an resource access (4624:3) to devices for the first time.\"\n    | project TimeGenerated, AnomalyName, Tactic, Technique, SubTechnique, Description, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"Evidence\"]=ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, [\"Anomaly Score\"]=InvestigationPriority; \nlet AnomalousRDPActivity = LogOns\n    | where ActionType == \"RemoteInteractiveLogon\"\n    | where ActivityInsights.FirstTimeUserLoggedOnToDevice == true\n    | extend AnomalyName = \"Anomalous RDP Activity\",\n        Tactic = \"Lateral Movement\",\n        Technique = \"\",\n        SubTechnique = \"\",\n        Description = \"Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user. FIN10, for example, has used RDP to move laterally to systems in the victim environment. The query below generates an output of all users performing a remote interactive logon (4624:10) to a device for the first time.\"\n    | project TimeGenerated, AnomalyName, Tactic, Technique, SubTechnique, Description, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"Evidence\"]=ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, [\"Anomaly Score\"]=InvestigationPriority; \nlet AnomalousLogintoDevices = LogOns\n    | where ActionType == \"InteractiveLogon\"\n    | where ActivityInsights.FirstTimeUserLoggedOnToDevice == true\n    | where UsersInsights.DormantAccount == true or DevicesInsights.LocalAdmin == true\n    | extend AnomalyName = \"Anomalous Login To Devices\",\n        Tactic = \"Privilege Escalation\",\n        Technique = \"Valid Accounts\",\n        SubTechnique = \"\",\n        Description = \"Adversaries may steal the credentials of a specific user or service account using Credential Access techniques or capture credentials earlier in their reconnaissance process through social engineering for means of gaining Initial Access. APT33, for example, has used valid accounts for initial access and privilege escalation. The query below generates an output of all administator users performing an interactive logon (4624:2) to a device for the first time.\"\n    | project TimeGenerated, AnomalyName, Tactic, Technique, SubTechnique, Description, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"Evidence\"]=ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, [\"Anomaly Score\"]=InvestigationPriority; \nlet AnomalousPasswordReset = BehaviorAnalytics\n    | where TimeGenerated > ago(28d)\n    | where ActionType == \"Reset user password\"\n    | where ActivityInsights.FirstTimeUserPerformedAction == \"True\"\n    | join (\n        AuditLogs\n        | where TimeGenerated > ago(28d)\n        | where OperationName == \"Reset user password\"\n        )\n        on $left.SourceRecordId == $right._ItemId\n    | mv-expand TargetResources\n    | extend Target =  iff(tostring(TargetResources.userPrincipalName) contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(TargetResources.userPrincipalName, \"#\")[0])), TargetResources.userPrincipalName), tostring(TargetResources.userPrincipalName)\n    | extend UserPrincipalName = iff(UserPrincipalName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserPrincipalName),\n        UserName = iff(UserName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserName)\n    | extend AnomalyName = \"Anomalous Password Reset\",\n        Tactic = \"Impact\",\n        Technique = \"Account Access Removal\",\n        SubTechnique = \"\",\n        Description = \"Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. LockerGoga, for example, has been observed changing account passwords and logging off current users. The query below generates an output of all users performing Reset user password for the first time.\"\n    | project TimeGenerated, AnomalyName, Tactic, Technique, SubTechnique, Description, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"TargetUser\"]=Target, [\"Evidence\"]=ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, [\"Anomaly Score\"]=InvestigationPriority\n    | sort by TimeGenerated desc;\nlet AnomalousGeoLocationLogon = BehaviorAnalytics\n    | where TimeGenerated > ago(28d)\n    | where ActionType == \"Sign-in\"\n    | where ActivityInsights.FirstTimeUserConnectedFromCountry == True and (ActivityInsights.FirstTimeConnectionFromCountryObservedInTenant == True or ActivityInsights.CountryUncommonlyConnectedFromAmongPeers == True)\n    | join (\n        SigninLogs\n        | where TimeGenerated > ago(28d)\n        )\n        on $left.SourceRecordId == $right._ItemId\n    | extend UserPrincipalName = iff(UserPrincipalName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserPrincipalName),\n        UserName = iff(UserName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserName)\n    | extend AnomalyName = \"Anomalous Successful Logon\",\n        Tactic = \"Initial Access\",\n        Technique = \"Valid Accounts\",\n        SubTechnique = \"\",\n        Description = \"Adversaries may steal the credentials of a specific user or service account using Credential Access techniques or capture credentials earlier in their reconnaissance process through social engineering for means of gaining Initial Access. APT33, for example, has used valid accounts for initial access. The query below generates an output of successful Sign-in performed by a user from a new geo location he has never connected from before, and none of his peers as well.\"\n    | project TimeGenerated, AnomalyName, Tactic, Technique, SubTechnique, Description, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"Evidence\"]=ActivityInsights, ResourceDisplayName, AppDisplayName, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, [\"Anomaly Score\"]=InvestigationPriority; \nlet AnomalousFailedLogon = BehaviorAnalytics\n    | where TimeGenerated > ago(28d)\n    | where ActivityType == \"LogOn\"\n    | where UsersInsights.BlastRadius == \"High\"\n    | join (\n        SigninLogs  \n        | where TimeGenerated > ago(28d)\n        | where Status.errorCode == 50126\n        )\n        on $left.SourceRecordId == $right._ItemId\n    | extend UserPrincipalName = iff(UserPrincipalName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserPrincipalName),\n        UserName = iff(UserName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserName)\n    | extend AnomalyName = \"Anomalous Failed Logon\",\n        Tactic = \"Credential Access\",\n        Technique = \"Brute Force\",\n        SubTechnique = \"Password Guessing\",\n        Description = \"Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Emotet, for example, has been observed using a hard coded list of passwords to brute force user accounts. The query below generates an output of all users with 'High' BlastRadius that perform failed Sign-in:Invalid username or password.\"\n    | project TimeGenerated, AnomalyName, Tactic, Technique, SubTechnique, Description, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"Evidence\"]=ActivityInsights, ResourceDisplayName, AppDisplayName, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, [\"Anomaly Score\"]=InvestigationPriority; \nlet AnomalousAADAccountManipulation = AuditLogs\n    | where TimeGenerated > ago(28d)\n    | where OperationName == \"Update user\"\n    | mv-expand AdditionalDetails\n    | where AdditionalDetails.key == \"UserPrincipalName\"\n    | mv-expand TargetResources\n    | extend RoleId = tostring(TargetResources.modifiedProperties[0].newValue)\n    | where isnotempty(RoleId) and RoleId in (critical, high)\n    | extend RoleName = tostring(TargetResources.modifiedProperties[1].newValue)\n    | where isnotempty(RoleName)\n    | extend TargetId = tostring(TargetResources.id)\n    | extend Target =  iff(tostring(TargetResources.userPrincipalName) contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(TargetResources.userPrincipalName, \"#\")[0])), TargetResources.userPrincipalName), tostring(TargetResources.userPrincipalName)\n    | join kind=inner ( \n        BehaviorAnalytics\n        | where TimeGenerated > ago(28d)\n        | where ActionType == \"Update user\"\n        | where UsersInsights.BlasrRadius == \"High\" or ActivityInsights.FirstTimeUserPerformedAction == true\n        )\n        on $left._ItemId == $right.SourceRecordId\n    | extend UserPrincipalName = iff(UserPrincipalName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserPrincipalName),\n        UserName = iff(UserName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserName) \n    | extend AnomalyName = \"Anomalous Account Manipulation\",\n        Tactic = \"Persistence\",\n        Technique = \"Account Manipulation\",\n        SubTechnique = \"\",\n        Description = \"Adversaries may manipulate accounts to maintain access to victim systems. These actions include adding new accounts to high privilleged groups. Dragonfly 2.0, for example, added newly created accounts to the administrators group to maintain elevated access. The query below generates an output of all high Blast Radius users performing 'Update user' (name change) to priveleged role, or ones that changed users for the first time.\"\n    | project TimeGenerated, AnomalyName, Tactic, Technique, SubTechnique, Description, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"TargetUser\"]=Target, RoleName, [\"Evidence\"]=ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, [\"Anomaly Score\"]=InvestigationPriority;\nlet AnomalousAADAccountCreation = BehaviorAnalytics\n    | where TimeGenerated > ago(28d)\n    | where ActionType == \"Add user\"\n    | where ActivityInsights.FirstTimeUserPerformedAction == True or ActivityInsights.FirstTimeActionPerformedInTenant == True or ActivityInsights.ActionUncommonlyPerformedAmongPeers == true\n    | join(\n        AuditLogs\n        | where TimeGenerated > ago(28d) \n        | where OperationName == \"Add user\"\n        )\n        on $left.SourceRecordId == $right._ItemId\n    | mv-expand TargetResources\n    | extend Target =  iff(tostring(TargetResources.userPrincipalName) contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(TargetResources.userPrincipalName, \"#\")[0])), TargetResources.userPrincipalName), tostring(TargetResources.userPrincipalName)\n    | extend DisplayName = tostring(UsersInsights.AccountDisplayName),\n        UserPrincipalName = iff(UserPrincipalName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserPrincipalName),\n        UserName = iff(UserName contains \"#EXT#\", replace(\"_\", \"@\", tostring(split(UserPrincipalName, \"#\")[0])), UserName)\n    | extend AnomalyName = \"Anomalous Account Creation\",\n        Tactic = \"Persistence\",\n        Technique = \"Create Account\",\n        SubTechnique = \"Cloud Account\",\n        Description = \"Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system. The query below generates an output of all the users performing user creation for the first time and the target users that were created.\"\t\n    | project TimeGenerated, AnomalyName, Tactic, Technique, SubTechnique, Description, UserName, UserPrincipalName, UsersInsights, ActivityType, ActionType, [\"TargetUser\"]=Target, [\"Evidence\"]=ActivityInsights, SourceIPAddress, SourceIPLocation, SourceDevice, DevicesInsights, [\"Anomaly Score\"]=InvestigationPriority\n    | sort by TimeGenerated desc;\nlet AnomalyTable = union kind=outer AnomalousSigninActivity, AnomalousRoleAssignment, AnomalousResourceAccess, AnomalousRDPActivity, AnomalousPasswordReset, AnomalousLogintoDevices, AnomalousGeoLocationLogon, AnomalousAADAccountManipulation, AnomalousAADAccountCreation, AnomalousFailedLogon;\nlet TopUsersByAnomalies = AnomalyTable\n    | summarize hint.strategy = shuffle AnomalyCount=count() by UserName, UserPrincipalName, tostring(UsersInsights.OnPremSid), tostring(UsersInsights.AccountObjectId)\n    | project Name=tolower(UserName), UPN=tolower(UserPrincipalName), AadUserId=UsersInsights_AccountObjectId, Sid=UsersInsights_OnPremSid, AnomalyCount\n    | sort by AnomalyCount desc;\nlet TopUsersByIncidents = SecurityIncident\n    | where TimeGenerated > ago(28d) \n    | summarize hint.strategy = shuffle arg_max(LastModifiedTime, *) by IncidentNumber\n    | where Status == \"New\" or Status == \"Active\"\n    | mv-expand AlertIds\n    | extend AlertId = tostring(AlertIds)\n    | join kind= innerunique ( \n        SecurityAlert\n        | where TimeGenerated > ago(28d) \n        )\n        on $left.AlertId == $right.SystemAlertId\n    | summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n    | mv-expand todynamic(Entities)\n    | where Entities[\"Type\"] =~ \"account\"\n    | extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n        Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n    | extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n    | union TopUsersByAnomalies\n    | extend \n        AadPivot = iff(isempty(AadUserId), iff(isempty(Sid), Name, Sid), AadUserId),\n        SidPivot = iff(isempty(Sid), iff(isempty(AadUserId), Name, AadUserId), Sid),\n        UPNExists = iff(isempty(UPN), false, true),\n        NameExists = iff(isempty(Name), false, true),\n        SidExists = iff(isempty(Sid), false, true),\n        AADExists = iff(isempty(AadUserId), false, true)\n    | summarize hint.strategy = shuffle IncidentCount=dcount(IncidentNumber, 4), AlertCount=dcountif(AlertId, isnotempty(AlertId), 4), AnomalyCount=sum(AnomalyCount), any(Title, Severity, Status, StartTime, IncidentNumber, IncidentUrl, Owner), UPNAnchor=anyif(UPN, UPNExists == true), NameAnchor=anyif(Name, NameExists == true), AadAnchor=anyif(AadUserId, AADExists == true), SidAnchor=anyif(Sid, SidExists == true), any(SidPivot) by AadPivot\n    | summarize hint.strategy = shuffle IncidentCount=sum(IncidentCount), AlertCount=sum(AlertCount), AnomalyCount=sum(AnomalyCount), UPNAnchor=anyif(UPNAnchor, isempty(UPNAnchor) == false), NameAnchor=anyif(NameAnchor, isempty(NameAnchor) == false), AadAnchor=anyif(AadAnchor, isempty(AadAnchor) == false), SidAnchor=anyif(SidAnchor, isempty(SidAnchor) == false), any(any_Title, any_Severity, any_StartTime, any_IncidentNumber, any_IncidentUrl) by any_SidPivot\n    | summarize hint.strategy = shuffle IncidentCount=sum(IncidentCount), AlertCount=sum(AlertCount), AnomalyCount=sum(AnomalyCount), UPNAnchor=anyif(UPNAnchor, isempty(UPNAnchor) == false), AadAnchor=anyif(AadAnchor, isempty(AadAnchor) == false), SidAnchor=anyif(SidAnchor, isempty(SidAnchor) == false), any(any_any_Title, any_any_Severity, any_any_StartTime, any_any_IncidentNumber, any_any_IncidentUrl) by NameAnchor\n    | project [\"UserName\"]=NameAnchor, IncidentCount, AlertCount, AnomalyCount, [\"AadUserId\"]=AadAnchor, [\"OnPremSid\"]=SidAnchor, [\"UserPrincipalName\"]=UPNAnchor;\nTopUsersByIncidents\n| where UserName contains \"@{variables('AccountName')}\"\n| project IncidentCount, AlertCount, AnomalyCount, UserPrincipalName\n| sort by UserPrincipalName, IncidentCount, AlertCount, AnomalyCount",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/visualizeQuery",
                                "queries": {
                                        "resourcegroups": "[parameters('SentinelRG')]",
                                        "resourcename": "[parameters('SentinelWSName')]",
                                        "resourcetype": "Log Analytics Workspace",
                                        "subscriptions": "[parameters('SentinelSubID')]",
                                    "timerange": "ago(10d)",
                                    "visType": "Html Table"
                                }
                            }
                        },
                        "Send_approval_email": {
                            "runAfter": {
                                "HIBPStatusCodeCondition": [
                                    "Succeeded",
                                    "Failed",
                                    "Skipped",
                                    "TimedOut"
                                ]
                            },
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "Message": {
                                        "Attachments": [
                                            {
                                                "ContentBytes": "@{body('Run_query_and_visualize_results_-_UEBA_Analysis')?['attachmentContent']}",
                                                "Name": "@body('Run_query_and_visualize_results_-_UEBA_Analysis')?['attachmentName']"
                                            }
                                        ],
                                        "Body": "Azure Sentinel Alert:\n\nTItle: @{triggerBody()?['object']?['properties']?['title']}\n\nDescription: @{triggerBody()?['object']?['properties']?['description']}\n\nAccount Name: @{variables('AccountName')}\n\nStatus: @{triggerBody()?['object']?['properties']?['status']}\n\nAzure Sentinel ID: @{triggerBody()?['object']?['properties']?['incidentNumber']}\n\nDate (NZT): @{convertFromUtc(triggerBody()?['object']?['properties']?['createdTimeUtc'], 'New Zealand Standard Time', 'dd MMMM yyyy')}\n\nTime (NZT - 24H): @{convertFromUtc(triggerBody()?['object']?['properties']?['createdTimeUtc'], 'New Zealand Standard Time', 'HH:mm')}\n\nHIBP Result: @{variables('HIBPResult')}\n\nIP Health Score: \n\nIP:  @{variables('IP')}\n\nIs IP Malicious: @{variables('IsIPMalicious')}\n\nIP AV Detect Rate: @{variables('IPAVDetect')}\n\nNumber of times the given IP address was found in the previous Alerts: @{variables('SecurityAlertCount')} events.\n\nNumber of times the given IP address was found in the sign-in logs: \n@{variables('OccurrencesInSignins')} events.\n\nSentinel Entity Behavior Analytics (Incident Count, Alert Count, Anomaly Count) :  See attached.\n\nIf you think the incident is a Confirmed False positive: Click Approve.",
                                        "HideHTMLMessage": false,
                                        "Importance": "Normal",
                                        "Options": "Approve, Reject",
                                        "ShowHTMLConfirmationDialog": false,
                                        "Subject": "Azure Sentinel - @{triggerBody()?['object']?['properties']?['incidentNumber']} - Approve, Reject",
                                        "To": "[parameters('SOCEmailAddress')]"
                                    },
                                    "NotificationUrl": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365']['connectionId']"
                                    }
                                },
                                "path": "/approvalmail/$subscriptions"
                            }
                        },
                        "SetAccountName": {
                            "foreach": "@body('Entities_-_Get_Accounts')?['Accounts']",
                            "actions": {
                                "Set-AccountName": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "AccountName",
                                        "value": "@items('SetAccountName')?['Name']"
                                    }
                                }
                            },
                            "runAfter": {
                                "InitializeAccountName": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "SetHIBPStatusCode": {
                            "runAfter": {
                                "HIBP": [
                                    "Succeeded",
                                    "Failed",
                                    "Skipped",
                                    "TimedOut"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "HIBPStatusCode",
                                "value": "@{outputs('HIBP')['statusCode']}"
                            }
                        },
                        "SetIP": {
                            "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                            "actions": {
                                "SetIPAddress": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "IP",
                                        "value": "@items('SetIP')?['Address']"
                                    }
                                }
                            },
                            "runAfter": {
                                "SetUEBAResults": [
                                    "Succeeded",
                                    "Failed",
                                    "Skipped",
                                    "TimedOut"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "SetUEBAResults": {
                            "runAfter": {
                                "Run_query_and_visualize_results_-_UEBA_Analysis": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "UEBAResults",
                                "value": "@base64ToString(body('Run_query_and_visualize_results_-_UEBA_Analysis')?['attachmentContent'])"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureMonitorConnectionName'))]",
                                "connectionName": "[variables('AzureMonitorConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                            },
                            "azuresentinel":{
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                                "connectionName": "[variables('AzureSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                            },
                            "office365": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Office365ConnectionName'))]",
                                "connectionName": "[variables('Office365ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}
