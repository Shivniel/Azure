{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspaceName": {
            "type": "string",
            "metadata": {
                "description": "Name for the Log Analytics workspace"
            }
        },
        "dataConnectorsList": {
            "type": "string",
            "metadata": {
                "description": "Comma separated enabled connectors: AzureActivityLog,SecurityEvents,WindowsFirewall,DnsAnalytics. Reference: https://docs.microsoft.com/azure/templates/microsoft.operationalinsights/2020-03-01-preview/workspaces/datasources#microsoftoperationalinsightsworkspacesdatasources-object"
            }
        },
        "roleGuid": {
            "type": "string",
            "defaultValue": "[newGuid()]"
        }
    },
    "functions": [],
    "variables": {
        "identityName": "[concat('userIdentity',uniqueString(resourceGroup().id))]"
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BuiltInFusion')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BuiltInFusion')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Fusion",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "enabled": true,
                "alertRuleTemplateName": "f71aba3d-28fb-450b-b192-4e76a83015c8"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/13bd7da5-cab9-4097-b0f0-d453c04c805b')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/13bd7da5-cab9-4097-b0f0-d453c04c805b')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "MicrosoftSecurityIncidentCreation",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "11111111Create incidents based on Azure Active Directory Identity Protection alerts",
                "description": "Create incidents based on all alerts generated in Azure Active Directory Identity Protection",
                "enabled": true,
                "productFilter": "Azure Active Directory Identity Protection",
                "severitiesFilter": [
                    "High",
                    "Medium"
                ],
                "displayNamesFilter": null,
                "displayNamesExcludeFilter": null,
                "alertRuleTemplateName": "532c1811-79ee-4d9f-8d4d-6304c840daa1"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/45f21f23-0211-4dda-9cf6-9adb37b09b56')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/45f21f23-0211-4dda-9cf6-9adb37b09b56')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "MicrosoftSecurityIncidentCreation",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Create incidents based on Azure Defender alerts",
                "description": "Create incidents based on all alerts generated in Azure Defender",
                "enabled": true,
                "productFilter": "Azure Security Center",
                "severitiesFilter": [
                    "High"
                ],
                "displayNamesFilter": null,
                "displayNamesExcludeFilter": null,
                "alertRuleTemplateName": "90586451-7ba8-4c1e-9904-7d1b7c3cc4d6"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/490010cb-8029-441c-b330-5a0607f2bb0f')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/490010cb-8029-441c-b330-5a0607f2bb0f')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "MicrosoftSecurityIncidentCreation",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Create incidents based on Microsoft Cloud App Security alerts",
                "description": "Create incidents based on all alerts generated in Microsoft Cloud App Security",
                "enabled": false,
                "productFilter": "Microsoft Cloud App Security",
                "severitiesFilter": null,
                "displayNamesFilter": null,
                "displayNamesExcludeFilter": null,
                "alertRuleTemplateName": "b3cfc7c0-092c-481c-a55b-34a3979758cb"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/10f8619e-0c3a-412a-89a9-96660a80023c')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/10f8619e-0c3a-412a-89a9-96660a80023c')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "MicrosoftSecurityIncidentCreation",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Create incidents based on Microsoft Defender for Endpoint alerts",
                "description": "Create incidents based on all alerts generated in Microsoft Defender for Endpoint",
                "enabled": false,
                "productFilter": "Microsoft Defender Advanced Threat Protection",
                "severitiesFilter": null,
                "displayNamesFilter": null,
                "displayNamesExcludeFilter": null,
                "alertRuleTemplateName": "327cd4ed-ca42-454b-887c-54e1c91363c6"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d6438587-fc5a-4416-81b4-655a7db16e4a')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d6438587-fc5a-4416-81b4-655a7db16e4a')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "MicrosoftSecurityIncidentCreation",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Create incidents based on Microsoft Defender for Identity alerts",
                "description": "Create incidents based on all alerts generated in Microsoft Defender for Identity",
                "enabled": true,
                "productFilter": "Azure Advanced Threat Protection",
                "severitiesFilter": [
                    "High",
                    "Medium",
                    "Low"
                ],
                "displayNamesFilter": null,
                "displayNamesExcludeFilter": null,
                "alertRuleTemplateName": "40ba9493-4183-4eee-974f-87fe39c8f267"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/800ef69b-435c-4291-a7b1-ca95e67151d9')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/800ef69b-435c-4291-a7b1-ca95e67151d9')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "MicrosoftSecurityIncidentCreation",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Create incidents based on Microsoft Defender for Office 365 alerts",
                "description": "Create incidents based on all alerts generated in Microsoft Defender for Office 365",
                "enabled": false,
                "productFilter": "Office 365 Advanced Threat Protection",
                "severitiesFilter": [
                    "High",
                    "Medium"
                ],
                "displayNamesFilter": null,
                "displayNamesExcludeFilter": null,
                "alertRuleTemplateName": "ee1d718b-9ed9-4a71-90cd-a483a4f008df"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2f120180-76dd-4aad-b593-54c5800b2265')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2f120180-76dd-4aad-b593-54c5800b2265')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Anomalous sign-in location by user account and authenticating application",
                "description": "This query over Azure Active Directory sign-in considers all user sign-ins for each Azure Active \nDirectory application and picks out the most anomalous change in location profile for a user within an \nindividual application. An alert is generated for recent sign-ins that have location counts that are anomalous\nover last day but also over the last 3-day and 7-day periods.\nPlease note that on workspaces with larger volume of Signin data (~10M+ events a day) may timeout when using this default query time period.\nIt is recommended that you test and tune this appropriately for the workspace.",
                "severity": "Medium",
                "enabled": true,
                "query": "let lookBack_long = 7d;\nlet lookBack_med = 3d;\nlet lookBack = 1d;\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where TimeGenerated >= startofday(ago(lookBack_long))\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n| extend locationString = strcat(tostring(LocationDetails.countryOrRegion), \"/\", tostring(LocationDetails.state), \"/\", tostring(LocationDetails.city), \";\") \n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \n// Create time series \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack_long)),now(), 1d) \nby UserPrincipalName, AppDisplayName \n// Compute best fit line for each entry \n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \n// Chart the 3 most interesting lines  \n// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application\n| where Slope > 0.3\n| top 50 by Slope desc\n| join kind = leftsemi (\ntable(tableName)\n| where TimeGenerated >= startofday(ago(lookBack_med))\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n| extend locationString = strcat(tostring(LocationDetails.countryOrRegion), \"/\", tostring(LocationDetails.state), \"/\", tostring(LocationDetails.city), \";\") \n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack_med)) ,now(), 1d) \nby UserPrincipalName, AppDisplayName \n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount)\n| where Slope > 0.3\n| top 50 by Slope desc\n) on UserPrincipalName, AppDisplayName\n| join kind = leftsemi (\ntable(tableName)\n| where TimeGenerated >= startofday(ago(lookBack))\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n| extend locationString = strcat(tostring(LocationDetails.countryOrRegion), \"/\", tostring(LocationDetails.state), \"/\", tostring(LocationDetails.city), \";\") \n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack)) ,now(), 1d) \nby UserPrincipalName, AppDisplayName \n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount)\n| where Slope > 5\n| top 50 by Slope desc\n// Higher threshold requirement on last day anomaly\n) on UserPrincipalName, AppDisplayName\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
                "queryFrequency": "P1D",
                "queryPeriod": "P14D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "InitialAccess"
                ],
                "alertRuleTemplateName": "7cb8f77d-c52f-4e46-b82f-3cf2e106224a",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9e7dbd35-22e2-4809-b6e3-370f13831b1c')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9e7dbd35-22e2-4809-b6e3-370f13831b1c')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Attempts to sign in to disabled accounts",
                "description": "Identifies failed attempts to sign in to disabled accounts across multiple Azure Applications.\nDefault threshold for Azure Applications attempted to sign in to is 3.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n50057 - User account is disabled. The account has been disabled by an administrator.",
                "severity": "Medium",
                "enabled": true,
                "query": "let threshold = 3;\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where ResultType == \"50057\"\n| where ResultDescription =~ \"User account is disabled. The account has been disabled by an administrator.\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), applicationCount = dcount(AppDisplayName), \napplicationSet = make_set(AppDisplayName), count() by UserPrincipalName, IPAddress, Type\n| where applicationCount >= threshold\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "InitialAccess"
                ],
                "alertRuleTemplateName": "75ea5c39-93e5-489b-b1e1-68fa6c9d2d04",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/1242c584-c4ff-49c1-9132-4b6f48cb3aa9')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/1242c584-c4ff-49c1-9132-4b6f48cb3aa9')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Brute force attack against Azure Portal",
                "description": "Identifies evidence of brute force activity against Azure Portal by highlighting multiple authentication failures \nand by a successful authentication within a given time window. \n(The query does not enforce any sequence - eg requiring the successful authentication to occur last.)\nDefault Failure count is 5, Default Success count is 1 and default Time Window is 20 minutes.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.",
                "severity": "Medium",
                "enabled": true,
                "query": "let failureCountThreshold = 5;\nlet successCountThreshold = 1;\nlet authenticationWindow = 20m;\nlet aadFunc = (tableName:string){\ntable(tableName)\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city), Region = tostring(LocationDetails.countryOrRegion)\n| where AppDisplayName has \"Azure Portal\"\n// Split out failure versus non-failure types\n| extend FailureOrSuccess = iff(ResultType in (\"0\", \"50125\", \"50140\", \"70043\", \"70044\"), \"Success\", \"Failure\")\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), IPAddress = make_set(IPAddress), make_set(OS), make_set(Browser), make_set(City),\nmake_set(State), make_set(Region),make_set(ResultType), FailureCount = countif(FailureOrSuccess==\"Failure\"), SuccessCount = countif(FailureOrSuccess==\"Success\") \nby bin(TimeGenerated, authenticationWindow), UserDisplayName, UserPrincipalName, AppDisplayName, Type\n| where FailureCount >= failureCountThreshold and SuccessCount >= successCountThreshold\n| mvexpand IPAddress\n| extend IPAddress = tostring(IPAddress)\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress \n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "CredentialAccess"
                ],
                "alertRuleTemplateName": "28b42356-45af-40a6-a0b4-a554cdfd5d8a",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/da605188-f97b-4dcd-9da4-44ebea5e6511')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/da605188-f97b-4dcd-9da4-44ebea5e6511')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Exchange AuditLog disabled",
                "description": "Identifies when the exchange audit logging has been disabled which may be an adversary attempt\nto evade detection or avoid other defenses.",
                "severity": "Medium",
                "enabled": true,
                "query": "OfficeActivity\n| where UserType in~ (\"Admin\",\"DcAdmin\") \n// Only admin or global-admin can disable audit logging\n| where Operation =~ \"Set-AdminAuditLogConfig\" \n| extend AdminAuditLogEnabledValue = tostring(parse_json(tostring(parse_json(tostring(array_slice(parse_json(Parameters),3,3)))[0])).Value)\n| where AdminAuditLogEnabledValue =~ \"False\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Operation, UserType, UserId, ClientIP, ResultStatus, Parameters, AdminAuditLogEnabledValue\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "DefenseEvasion"
                ],
                "alertRuleTemplateName": "194dd92e-d6e7-4249-85a5-273350a7f5ce",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/16ecda7e-87a8-4163-8bb6-530fc6a84943')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/16ecda7e-87a8-4163-8bb6-530fc6a84943')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Mail redirect via ExO transport rule",
                "description": "Identifies when Exchange Online transport rule configured to forward emails.\nThis could be an adversary mailbox configured to collect mail from multiple user accounts.",
                "severity": "Medium",
                "enabled": true,
                "query": "OfficeActivity\n| where OfficeWorkload == \"Exchange\"\n| where Operation in~ (\"New-TransportRule\", \"Set-TransportRule\")\n| extend p = parse_json(Parameters)\n| extend RuleName = case(\n  Operation =~ \"Set-TransportRule\", tostring(OfficeObjectId),\n  Operation =~ \"New-TransportRule\", tostring(p[1].Value),\n  \"Unknown\"\n  ) \n| mvexpand p\n| where (p.Name =~ \"BlindCopyTo\" or p.Name =~ \"RedirectMessageTo\") and isnotempty(p.Value)\n| extend RedirectTo = p.Value\n| extend ClientIPOnly = case( \n  ClientIP has \".\" and ClientIP has \":\", tostring(split(ClientIP,\":\")[0]), \n  ClientIP has \".\" and ClientIP has \"-\", tostring(split(ClientIP,\"-\")[0]), \n  ClientIP has \"[\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))),\n  ClientIP\n  )  \n| extend Port = case(\n  ClientIP has \".\" and ClientIP has \":\", (split(ClientIP,\":\")[1]),\n  ClientIP has \".\" and ClientIP has \"-\", (split(ClientIP,\"-\")[1]),\n  ClientIP has \"[\" and ClientIP has \":\", tostring(split(ClientIP,\"]:\")[1]),\n  ClientIP has \"[\" and ClientIP has \"-\", tostring(split(ClientIP,\"]-\")[1]),\n  ClientIP\n  )\n| extend ClientIP = ClientIPOnly\n| project TimeGenerated, RedirectTo, ClientIP, Port, UserId, Operation, RuleName\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserId, IPCustomEntity = ClientIP",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "Collection",
                    "Exfiltration"
                ],
                "alertRuleTemplateName": "500415fb-bba7-4227-a08a-9857fb61b6a7",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "AlertPerResult"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/24c4f2c3-1425-4e46-94d3-cb54264a6683')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/24c4f2c3-1425-4e46-94d3-cb54264a6683')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Malicious Inbox Rule",
                "description": "Often times after the initial compromise the attackers create inbox rules to delete emails that contain certain keywords. \n This is done so as to limit ability to warn compromised users that they've been compromised. Below is a sample query that tries to detect this.\nReference: https://www.reddit.com/r/sysadmin/comments/7kyp0a/recent_phishing_attempts_my_experience_and_what/",
                "severity": "Medium",
                "enabled": true,
                "query": "let Keywords = dynamic([\"helpdesk\", \" alert\", \" suspicious\", \"fake\", \"malicious\", \"phishing\", \"spam\", \"do not click\", \"do not open\", \"hijacked\", \"Fatal\"]);\nOfficeActivity\n| where Operation =~ \"New-InboxRule\"\n| where Parameters has \"Deleted Items\" or Parameters has \"Junk Email\" \n| extend Events=todynamic(Parameters)\n| parse Events  with * \"SubjectContainsWords\" SubjectContainsWords '}'*\n| parse Events  with * \"BodyContainsWords\" BodyContainsWords '}'*\n| parse Events  with * \"SubjectOrBodyContainsWords\" SubjectOrBodyContainsWords '}'*\n| where SubjectContainsWords has_any (Keywords)\n or BodyContainsWords has_any (Keywords)\n or SubjectOrBodyContainsWords has_any (Keywords)\n| extend ClientIPAddress = case( ClientIP has \".\", tostring(split(ClientIP,\":\")[0]), ClientIP has \"[\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))), ClientIP )\n| extend Keyword = iff(isnotempty(SubjectContainsWords), SubjectContainsWords, (iff(isnotempty(BodyContainsWords),BodyContainsWords,SubjectOrBodyContainsWords )))\n| extend RuleDetail = case(OfficeObjectId contains '/' , tostring(split(OfficeObjectId, '/')[-1]) , tostring(split(OfficeObjectId, '\\\\')[-1]))\n| summarize count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by  Operation, UserId, ClientIPAddress, ResultStatus, Keyword, OriginatingServer, OfficeObjectId, RuleDetail\n| extend timestamp = StartTimeUtc,  IPCustomEntity = ClientIPAddress, AccountCustomEntity = UserId , HostCustomEntity =  OriginatingServer",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "Persistence",
                    "DefenseEvasion"
                ],
                "alertRuleTemplateName": "7b907bf7-77d4-41d0-a208-5643ff75bf9a",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "Host",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "HostCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/870060be-8cb6-402a-9542-515335a98a6a')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/870060be-8cb6-402a-9542-515335a98a6a')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "MFA disabled for a user",
                "description": "Multi-Factor Authentication (MFA) helps prevent credential compromise. This alert identifies when an attempt has been made to disable MFA for a user ",
                "severity": "Medium",
                "enabled": true,
                "query": "(union isfuzzy=true\n(AuditLogs \n| where OperationName =~ \"Disable Strong Authentication\"\n| extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) \n| extend InitiatedByUser = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n| extend Targetprop = todynamic(TargetResources)\n| extend TargetUser = tostring(Targetprop[0].userPrincipalName) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by User = TargetUser, InitiatedByUser , Operation = OperationName , CorrelationId, IPAddress, Category, Source = SourceSystem , AADTenantId, Type\n),\n(AWSCloudTrail\n| where EventName in~ (\"DeactivateMFADevice\", \"DeleteVirtualMFADevice\") \n| extend InstanceProfileName = tostring(parse_json(RequestParameters).InstanceProfileName)\n| extend TargetUser = tostring(parse_json(RequestParameters).userName)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by User = TargetUser, Source = EventSource , Operation = EventName , TenantorInstance_Detail = InstanceProfileName, IPAddress = SourceIpAddress\n)\n)\n| extend timestamp = StartTimeUtc, AccountCustomEntity = User, IPCustomEntity = IPAddress",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "CredentialAccess"
                ],
                "alertRuleTemplateName": "65c78944-930b-4cae-bd79-c3664ae30ba7",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d66d1519-dc52-4a5d-82c1-04396c18fee3')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d66d1519-dc52-4a5d-82c1-04396c18fee3')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Multiple users email forwarded to same destination",
                "description": "Identifies when multiple (more than one) users mailboxes are configured to forward to the same destination. \nThis could be an attacker-controlled destination mailbox configured to collect mail from multiple compromised user accounts.",
                "severity": "Medium",
                "enabled": true,
                "query": "OfficeActivity\n| where Operation =~ \"Set-Mailbox\"\n| where Parameters has \"ForwardingSmtpAddress\"\n| extend parsed = parse_json(Parameters)\n| mv-expand parsed\n| where parsed.Name == \"ForwardingSmtpAddress\"\n| extend parameterName = tostring(parsed.Name), fwdingDestination = tostring(parsed.Value)\n| where isnotempty(fwdingDestination)\n| extend ClientIPOnly = case( \nClientIP has \".\" and ClientIP has ':', tostring(split(ClientIP,\":\")[0]), \nClientIP has \".\" and ClientIP has '-', tostring(split(ClientIP,\"-\")[0]), \nClientIP has ']-', tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))),\nClientIP has ']:', tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))),\nisempty(ClientIP) and ClientIP_ has \".\" and ClientIP_ has ':', tostring(split(ClientIP_,\":\")[0]), \nisempty(ClientIP) and ClientIP_ has \".\" and ClientIP_ has '-', tostring(split(ClientIP_,\"-\")[0]), \nisempty(ClientIP) and ClientIP_ has ']-', tostring(trim_start(@'[[]',tostring(split(ClientIP_,\"]\")[0]))),\nisempty(ClientIP) and ClientIP_ has ']:', tostring(trim_start(@'[[]',tostring(split(ClientIP_,\"]\")[0]))),\nisnotempty(ClientIP), ClientIP,\nisnotempty(ClientIP_), ClientIP_,\n\"IP Not Available\"\n)  \n| extend Port = case(\nClientIP has \".\" and ClientIP has ':', tostring(split(ClientIP,\":\")[1]), \nClientIP has \".\" and ClientIP has '-', tostring(split(ClientIP,\"-\")[1]), \nClientIP has ']-', tostring(split(ClientIP,\"]-\")[1]), \nClientIP has ']:', tostring(split(ClientIP,\"]:\")[1]), \nisempty(ClientIP) and ClientIP_ has \".\" and ClientIP_ has ':', tostring(split(ClientIP_,\":\")[1]), \nisempty(ClientIP) and ClientIP_ has \".\" and ClientIP_ has '-', tostring(split(ClientIP_,\"-\")[1]), \nisempty(ClientIP) and ClientIP_ has ']-', tostring(split(ClientIP_,\"]-\")[1]),\nisempty(ClientIP) and ClientIP_ has ']:', tostring(split(ClientIP_,\"]:\")[1]),\nisnotempty(ClientIP), ClientIP,\nisnotempty(ClientIP_), ClientIP_,\n\"IP Not Available\"\n)\n| extend UserId = iff(isempty(UserId), UserId_, UserId)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId), \nPorts = make_set(Port), EventCount = count() by fwdingDestination, ClientIP = ClientIPOnly \n| where DistinctUserCount > 1\n| mv-expand UserId\n| extend UserId = tostring(UserId), Ports = tostring(Ports)\n| distinct StartTimeUtc, EndTimeUtc, UserId, DistinctUserCount, ClientIP, Ports, fwdingDestination, EventCount\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP",
                "queryFrequency": "P1D",
                "queryPeriod": "P7D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "Collection",
                    "Exfiltration"
                ],
                "alertRuleTemplateName": "871ba14c-88ef-48aa-ad38-810f26760ca3",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/baa8bf10-5fb9-4ab4-a594-e1087f7a44b9')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/baa8bf10-5fb9-4ab4-a594-e1087f7a44b9')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Office policy tampering",
                "description": "Identifies if any tampering is done to either auditlog, ATP Safelink, SafeAttachment, AntiPhish or Dlp policy. \nAn adversary may use this technique to evade detection or avoid other policy based defenses.\nReferences: https://docs.microsoft.com/powershell/module/exchange/advanced-threat-protection/remove-antiphishrule?view=exchange-ps.",
                "severity": "Medium",
                "enabled": true,
                "query": "let opList = OfficeActivity \n| summarize by Operation\n//| where Operation startswith \"Remove-\" or Operation startswith \"Disable-\"\n| where Operation has_any (\"Remove\", \"Disable\")\n| where Operation contains \"AntiPhish\" or Operation contains \"SafeAttachment\" or Operation contains \"SafeLinks\" or Operation contains \"Dlp\" or Operation contains \"Audit\"\n| summarize make_set(Operation);\nOfficeActivity\n// Only admin or global-admin can disable/remove policy\n| where RecordType =~ \"ExchangeAdmin\"\n| where UserType in~ (\"Admin\",\"DcAdmin\")\n// Pass in interesting Operation list\n| where Operation in~ (opList)\n| extend ClientIPOnly = case( \nClientIP has \".\", tostring(split(ClientIP,\":\")[0]), \nClientIP has \"[\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))),\nClientIP\n)  \n| extend Port = case(\nClientIP has \".\", (split(ClientIP,\":\")[1]),\nClientIP has \"[\", tostring(split(ClientIP,\"]:\")[1]),\nClientIP\n)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Operation, UserType, UserId, ClientIP = ClientIPOnly, Port, ResultStatus, Parameters\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "Persistence",
                    "DefenseEvasion"
                ],
                "alertRuleTemplateName": "fbd72eb8-087e-466b-bd54-1ca6ea08c6d3",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a7456c6c-ba04-4798-af08-8ab339372c34')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a7456c6c-ba04-4798-af08-8ab339372c34')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Rare application consent",
                "description": "This will alert when the \"Consent to application\" operation occurs by a user that has not done this operation before or rarely does this.\nThis could indicate that permissions to access the listed Azure App were provided to a malicious actor. \nConsent to application, Add service principal and Add OAuth2PermissionGrant should typically be rare events. \nThis may help detect the Oauth2 attack that can be initiated by this publicly available tool - https://github.com/fireeye/PwnAuth\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.",
                "severity": "Medium",
                "enabled": true,
                "query": "let current = 1d;\nlet auditLookback = 7d;\n// Setting threshold to 3 as a default, change as needed.  \n// Any operation that has been initiated by a user or app more than 3 times in the past 7 days will be excluded\nlet threshold = 3;\n// Gather initial data from lookback period, excluding current, adjust current to more than a single day if no results\nlet AuditTrail = AuditLogs | where TimeGenerated >= ago(auditLookback) and TimeGenerated < ago(current)\n// 2 other operations that can be part of malicious activity in this situation are \n// \"Add OAuth2PermissionGrant\" and \"Add service principal\", extend the filter below to capture these too\n| where OperationName has \"Consent to application\"\n| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \ntostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| summarize max(TimeGenerated), OperationCount = count() by OperationName, InitiatedBy, TargetResourceName\n// only including operations by initiated by a user or app that is above the threshold so we produce only rare and has not occurred in last 7 days\n| where OperationCount > threshold\n;\n// Gather current period of audit data\nlet RecentConsent = AuditLogs | where TimeGenerated >= ago(current)\n| where OperationName has \"Consent to application\"\n| extend IpAddress = case(\nisnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)) and tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) != 'null', tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), \nisnotempty(tostring(parse_json(tostring(InitiatedBy.app)).ipAddress)) and tostring(parse_json(tostring(InitiatedBy.app)).ipAddress) != 'null', tostring(parse_json(tostring(InitiatedBy.app)).ipAddress),\n'Not Available')\n| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \ntostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| parse TargetResources.[0].modifiedProperties with * \"ConsentType: \" ConsentType \"]\" *\n| mv-expand AdditionalDetails\n| extend UserAgent = iff(AdditionalDetails.key == \"User-Agent\",tostring(AdditionalDetails.value),\"\")\n| project TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType, UserAgent, CorrelationId, Type;\n// Exclude previously seen audit activity for \"Consent to application\" that was seen in the lookback period\n// First for rare InitiatedBy\nlet RareConsentBy = RecentConsent | join kind= leftanti AuditTrail on OperationName, InitiatedBy \n| extend Reason = \"Previously unseen user consenting\";\n// Second for rare TargetResourceName\nlet RareConsentApp = RecentConsent | join kind= leftanti AuditTrail on OperationName, TargetResourceName\n| extend Reason = \"Previously unseen app granted consent\";\nRareConsentBy | union RareConsentApp\n| summarize Reason = makeset(Reason) by TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType, UserAgent, CorrelationId, Type\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatedBy, HostCustomEntity = TargetResourceName, IPCustomEntity = IpAddress",
                "queryFrequency": "P1D",
                "queryPeriod": "P7D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 3,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "Persistence",
                    "LateralMovement",
                    "Collection"
                ],
                "alertRuleTemplateName": "83ba3057-9ea3-4759-bf6a-933f2e5bc7ee",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "Host",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "HostCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/643ce40d-6cca-42cf-8fd6-25dbe14f4464')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/643ce40d-6cca-42cf-8fd6-25dbe14f4464')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Attempt to bypass conditional access rule in Azure AD",
                "description": "Identifies an attempt to Bypass conditional access rule(s) in Azure Active Directory.\nThe ConditionalAccessStatus column value details if there was an attempt to bypass Conditional Access\nor if the Conditional access rule was not satisfied (ConditionalAccessStatus == 1).\nReferences: \nhttps://docs.microsoft.com/azure/active-directory/conditional-access/overview\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\nConditionalAccessStatus == 0 // Success\nConditionalAccessStatus == 1 // Failure\nConditionalAccessStatus == 2 // Not Applied\nConditionalAccessStatus == 3 // unknown",
                "severity": "Low",
                "enabled": true,
                "query": "let threshold = 1;\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where ConditionalAccessStatus == 1 or ConditionalAccessStatus =~ \"failure\"\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city), Region = tostring(LocationDetails.countryOrRegion) \n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend ConditionalAccessPolicies = todynamic(ConditionalAccessPolicies)\n| extend ConditionalAccessPol0Name = tostring(ConditionalAccessPolicies[0].displayName)\n| extend ConditionalAccessPol1Name = tostring(ConditionalAccessPolicies[1].displayName)\n| extend ConditionalAccessPol2Name = tostring(ConditionalAccessPolicies[2].displayName)\n| extend Status = strcat(StatusCode, \": \", ResultDescription) \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Status = make_list(Status), StatusDetails = make_list(StatusDetails), IPAddresses = make_list(IPAddress), IPAddressCount = dcount(IPAddress), CorrelationIds = make_list(CorrelationId) \nby UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), City, State, Region, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name, Type\n| where IPAddressCount > threshold and StatusDetails !has \"MFA successfully completed\"\n| mvexpand IPAddresses, Status, StatusDetails, CorrelationIds\n| extend Status = strcat(Status, \" \", StatusDetails)\n| summarize IPAddresses = make_set(IPAddresses), Status = make_set(Status), CorrelationIds = make_set(CorrelationIds) \nby StartTime, EndTime, UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), City, State, Region, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name, IPAddressCount, Type\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = tostring(IPAddresses)\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "Equal",
                "triggerThreshold": 2,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "InitialAccess",
                    "Persistence"
                ],
                "alertRuleTemplateName": "3af9285d-bb98-4a35-ad29-5ea39ba0c628",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/be0347ba-3903-4f30-bcc1-fadb02db9363')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/be0347ba-3903-4f30-bcc1-fadb02db9363')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Attempt to bypass conditional access rule in Azure AD",
                "description": "Identifies an attempt to Bypass conditional access rule(s) in Azure Active Directory.\nThe ConditionalAccessStatus column value details if there was an attempt to bypass Conditional Access\nor if the Conditional access rule was not satisfied (ConditionalAccessStatus == 1).\nReferences: \nhttps://docs.microsoft.com/azure/active-directory/conditional-access/overview\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\nConditionalAccessStatus == 0 // Success\nConditionalAccessStatus == 1 // Failure\nConditionalAccessStatus == 2 // Not Applied\nConditionalAccessStatus == 3 // unknown",
                "severity": "Low",
                "enabled": false,
                "query": "let threshold = 1;\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where ConditionalAccessStatus == 1 or ConditionalAccessStatus =~ \"failure\"\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city), Region = tostring(LocationDetails.countryOrRegion) \n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend ConditionalAccessPolicies = todynamic(ConditionalAccessPolicies)\n| extend ConditionalAccessPol0Name = tostring(ConditionalAccessPolicies[0].displayName)\n| extend ConditionalAccessPol1Name = tostring(ConditionalAccessPolicies[1].displayName)\n| extend ConditionalAccessPol2Name = tostring(ConditionalAccessPolicies[2].displayName)\n| extend Status = strcat(StatusCode, \": \", ResultDescription) \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Status = make_list(Status), StatusDetails = make_list(StatusDetails), IPAddresses = make_list(IPAddress), IPAddressCount = dcount(IPAddress), CorrelationIds = make_list(CorrelationId) \nby UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), City, State, Region, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name, Type\n| where IPAddressCount > threshold and StatusDetails !has \"MFA successfully completed\"\n| mvexpand IPAddresses, Status, StatusDetails, CorrelationIds\n| extend Status = strcat(Status, \" \", StatusDetails)\n| summarize IPAddresses = make_set(IPAddresses), Status = make_set(Status), CorrelationIds = make_set(CorrelationIds) \nby StartTime, EndTime, UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), City, State, Region, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name, IPAddressCount, Type\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = tostring(IPAddresses)\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "Equal",
                "triggerThreshold": 2,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "InitialAccess",
                    "Persistence"
                ],
                "alertRuleTemplateName": "3af9285d-bb98-4a35-ad29-5ea39ba0c628",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/84593d16-aba6-4b7f-b4a9-fae7abee859f')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/84593d16-aba6-4b7f-b4a9-fae7abee859f')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Distributed Password cracking attempts in AzureAD",
                "description": "Identifies distributed password cracking attempts from the Azure Active Directory SigninLogs.\nThe query looks for unusually high number of failed password attempts coming from multiple locations for a user account.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n50053   Account is locked because the user tried to sign in too many times with an incorrect user ID or password.\n50055   Invalid password, entered expired password.\n50056   Invalid or null password - Password does not exist in store for this user.\n50126   Invalid username or password, or invalid on-premises username or password.",
                "severity": "Low",
                "enabled": true,
                "query": "let s_threshold = 30;\nlet l_threshold = 3;\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where OperationName =~ \"Sign-in activity\"\n// Error codes that we want to look at as they are related to the use of incorrect password.\n| where ResultType in (\"50126\", \"50053\" , \"50055\", \"50056\")\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend LocationString = strcat(tostring(LocationDetails.countryOrRegion), \"/\", tostring(LocationDetails.state), \"/\", tostring(LocationDetails.city))\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), LocationCount=dcount(LocationString), Location = make_set(LocationString), \nIPAddress = make_set(IPAddress), IPAddressCount = dcount(IPAddress), AppDisplayName = make_set(AppDisplayName), ResultDescription = make_set(ResultDescription), \nBrowser = make_set(Browser), OS = make_set(OS), SigninCount = count() by UserPrincipalName, Type                              \n// Setting a generic threshold - Can be different for different environment\n| where SigninCount > s_threshold and LocationCount >= l_threshold\n| extend tostring(Location), tostring(IPAddress), tostring(AppDisplayName), tostring(ResultDescription), tostring(Browser), tostring(OS)\n| distinct *\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "CredentialAccess"
                ],
                "alertRuleTemplateName": "bfb1c90f-8006-4325-98be-c7fffbc254d6",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/20304aa0-ad9f-4093-b73c-a2755a49a447')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/20304aa0-ad9f-4093-b73c-a2755a49a447')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "New executable via Office FileUploaded Operation",
                "description": "Identifies when executable file types are uploaded to Office services such as SharePoint and OneDrive.\nList currently includes 'exe', 'inf', 'gzip', 'cmd', 'bat' file extensions.\nAdditionally, identifies when a given user is uploading these files to another users workspace.\nThis may be indication of a staging location for malware or other malicious activity.",
                "severity": "Low",
                "enabled": true,
                "query": "// a threshold can be enabled, see commented line below for PrevSeenCount\nlet threshold = 2;\nlet uploadOp = 'FileUploaded';\n// Extensions that are interesting. Add/Remove to this list as you see fit\nlet execExt = dynamic(['exe', 'inf', 'gzip', 'cmd', 'bat']);\nlet starttime = 8d;\nlet endtime = 1d;\nOfficeActivity | where TimeGenerated >= ago(endtime)\n// Limited to File Uploads due to potential noise, comment out the Operation statement below to include any operation type\n// Additional, but potentially noisy operation types that include Uploads and Downloads can be included by adding the following - Operation contains \"upload\" or Operation contains \"download\"\n| where Operation =~ uploadOp\n| where SourceFileExtension has_any (execExt)\n| project TimeGenerated, OfficeId, OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, UserAgent, Site_Url, SourceRelativeUrl, SourceFileName\n| join kind= leftanti (\nOfficeActivity | where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where Operation =~ uploadOp\n| where SourceFileExtension has_any (execExt)\n| summarize SourceRelativeUrl = make_set(SourceRelativeUrl), UserId = make_set(UserId) , PrevSeenCount = count() by SourceFileName\n// To exclude previous matches when only above a specific count, change threshold above and uncomment the line below\n//| where PrevSeenCount > threshold\n| mvexpand SourceRelativeUrl, UserId\n| extend SourceRelativeUrl = tostring(SourceRelativeUrl), UserId = tostring(UserId)\n) on SourceFileName, SourceRelativeUrl, UserId \n| extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\n| extend UserIdUserFolderFormat = tolower(replace('@|\\\\.', '_',UserId))\n// identify when UserId is not a match to the specific site url personal folder reference\n| extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true , false ) \n| summarize TimeGenerated = make_list(TimeGenerated), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), \nUserAgents = make_list(UserAgent), OfficeIds = make_list(OfficeId), SourceRelativeUrls = make_list(SourceRelativeUrl), FileNames = make_list(SourceFileName)\nby OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, Site_Url, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\n| extend timestamp = StartTime, AccountCustomEntity = UserId, IPCustomEntity = ClientIP, URLCustomEntity = Site_Url",
                "queryFrequency": "P1D",
                "queryPeriod": "P8D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "CommandAndControl"
                ],
                "alertRuleTemplateName": "d722831e-88f5-4e25-b106-4ef6e29f8c13",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AnyAlert",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "URL",
                        "fieldMappings": [
                            {
                                "identifier": "Url",
                                "columnName": "URLCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3083bfa8-a992-46de-b14b-198064e9db43')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3083bfa8-a992-46de-b14b-198064e9db43')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Password spray attack against Azure AD application",
                "description": "Identifies evidence of password spray activity against Azure AD applications by looking for failures from multiple accounts from the same\nIP address within a time window. If the number of accounts breaches the threshold just once, all failures from the IP address within the time range\nare bought into the result. Details on whether there were successful authentications by the IP address within the time window are also included.\nThis can be an indicator that an attack was successful.\nThe default failure acccount threshold is 5, Default time window for failures is 20m and default look back window is 3 days\nNote: Due to the number of possible accounts involved in a password spray it is not possible to map identities to a custom entity.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.",
                "severity": "Low",
                "enabled": true,
                "query": "let timeRange = 3d;\nlet lookBack = 7d;\nlet authenticationWindow = 20m;\nlet authenticationThreshold = 5;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet failureCodes = dynamic([50053, 50126, 50055]); // invalid password, account is locked - too many sign ins, expired password\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\n// Lookup up resolved identities from last 7 days\nlet aadFunc = (tableName:string){\nlet identityLookup = table(tableName)\n| where TimeGenerated >= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| where isnotempty(UserId)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName, Type;\n// collect window threshold breaches\ntable(tableName)\n| where TimeGenerated > ago(timeRange)\n| where ResultType in(failureCodes)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), count() by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName, UserPrincipalName, Type\n| summarize FailedPrincipalCount = dcount(UserPrincipalName) by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName, Type\n| where FailedPrincipalCount >= authenticationThreshold\n| summarize WindowThresholdBreaches = count() by IPAddress, Type\n| join kind= inner (\n// where we breached a threshold, join the details back on all failure data\ntable(tableName)\n| where TimeGenerated > ago(timeRange)\n| where ResultType in(failureCodes)\n| extend LocationDetails = todynamic(LocationDetails)\n| extend FullLocation = strcat(LocationDetails.countryOrRegion,'|', LocationDetails.state, '|', LocationDetails.city)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), make_set(FullLocation), FailureCount = count() by IPAddress, AppDisplayName, UserPrincipalName, UserDisplayName, Identity, UserId, Type\n// lookup any unresolved identities\n| extend UnresolvedUserId = iff(Identity matches regex isGUID, UserId, \"\")\n| join kind= leftouter (\n identityLookup \n) on $left.UnresolvedUserId==$right.UserId\n| extend UserDisplayName=iff(isempty(lu_UserDisplayName), UserDisplayName, lu_UserDisplayName)\n| extend UserPrincipalName=iff(isempty(lu_UserPrincipalName), UserPrincipalName, lu_UserPrincipalName)\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), make_set(UserPrincipalName), make_set(UserDisplayName), make_set(set_ClientAppUsed), make_set(set_FullLocation), make_list(FailureCount) by IPAddress, AppDisplayName, Type\n| extend FailedPrincipalCount = arraylength(set_UserPrincipalName)\n) on IPAddress\n| project IPAddress, StartTime, EndTime, TargetedApplication=AppDisplayName, FailedPrincipalCount, UserPrincipalNames=set_UserPrincipalName, UserDisplayNames=set_UserDisplayName, ClientAppsUsed=set_set_ClientAppUsed, Locations=set_set_FullLocation, FailureCountByPrincipal=list_FailureCount, WindowThresholdBreaches, Type\n| join kind= inner (\ntable(tableName) // get data on success vs. failure history for each IP\n| where TimeGenerated > ago(timeRange)\n| where ResultType in(successCodes) or ResultType in(failureCodes) // success or failure types\n| summarize GlobalSuccessPrincipalCount = dcountif(UserPrincipalName, (ResultType in(successCodes))), ResultTypeSuccesses = make_set_if(ResultType, (ResultType in(successCodes))), GlobalFailPrincipalCount = dcountif(UserPrincipalName, (ResultType in(failureCodes))), ResultTypeFailures = make_set_if(ResultType, (ResultType in(failureCodes))) by IPAddress, Type\n| where GlobalFailPrincipalCount > GlobalSuccessPrincipalCount // where the number of failed principals is greater than success - eliminates FPs from IPs who authenticate successfully alot and as a side effect have alot of failures\n) on IPAddress\n| project-away IPAddress1\n| extend timestamp=StartTime, IPCustomEntity = IPAddress\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
                "queryFrequency": "P1D",
                "queryPeriod": "P7D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "CredentialAccess"
                ],
                "alertRuleTemplateName": "48607a29-a26a-4abf-8078-a06dbdd174a4",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/aed6981d-0ded-4f5a-85e8-30656df794a8')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/aed6981d-0ded-4f5a-85e8-30656df794a8')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Rare and potentially high-risk Office operations",
                "description": "Identifies Office operations that are typically rare and can provide capabilities useful to attackers.",
                "severity": "Low",
                "enabled": true,
                "query": "OfficeActivity\n| where Operation in~ ( \"Add-MailboxPermission\", \"Add-MailboxFolderPermission\", \"Set-Mailbox\", \"New-ManagementRoleAssignment\")\nand not(UserId has_any ('NT AUTHORITY\\\\SYSTEM (Microsoft.Exchange.ServiceHost)','devilfish-applicationaccount') and Operation in~ ( \"Add-MailboxPermission\", \"Set-Mailbox\"))\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserId, IPCustomEntity = ClientIP",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "Persistence",
                    "Collection"
                ],
                "alertRuleTemplateName": "957cb240-f45d-4491-9ba5-93430a3c08be",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/dbb8f384-80a0-4fb7-b033-bd631d5877ee')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/dbb8f384-80a0-4fb7-b033-bd631d5877ee')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "displayName": "Suspicious Resource deployment",
                "description": "Identifies when a rare Resource and ResourceGroup deployment occurs by a previously unseen Caller.",
                "severity": "Low",
                "enabled": true,
                "query": "let szOperationNames = dynamic([\"Microsoft.Compute/virtualMachines/write\", \"Microsoft.Resources/deployments/write\"]);\nlet starttime = 14d;\nlet endtime = 1d;\nlet RareCaller = AzureActivity\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where OperationNameValue in~ (szOperationNames)\n| project ResourceGroup, Caller, OperationNameValue, CallerIpAddress\n| join kind=rightantisemi (\nAzureActivity\n| where TimeGenerated > ago(endtime)\n| where OperationNameValue in~ (szOperationNames)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityStatusValue = makeset(ActivityStatusValue), OperationIds = makeset(OperationId), CallerIpAddress = makeset(CallerIpAddress) \nby ResourceId, Caller, OperationNameValue, Resource, ResourceGroup\n) on Caller, ResourceGroup \n| mvexpand CallerIpAddress\n| where isnotempty(CallerIpAddress);\nlet Counts = RareCaller | summarize ActivityCountByCaller = count() by Caller;\nRareCaller | join kind= inner (Counts) on Caller | project-away Caller1\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = tostring(CallerIpAddress)\n| sort by ActivityCountByCaller desc nulls last",
                "queryFrequency": "P1D",
                "queryPeriod": "P14D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "Impact"
                ],
                "alertRuleTemplateName": "9fb57e58-3ed8-4b89-afcf-c8e786508b1c",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f209187f-1d17-4431-94af-c141bf5f23db')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f209187f-1d17-4431-94af-c141bf5f23db')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "f209187f-1d17-4431-94af-c141bf5f23db",
                "displayName": "(Preview) Anomalous Account Creation",
                "enabled": true,
                "tactics": [
                    "Persistence"
                ],
                "anomalyVersion": "1.0.1",
                "techniques": [
                    "T1136"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.4",
                            "name": "Anomaly score threshold",
                            "description": "Generate an anomaly when the anomaly score is greater than the chosen value.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2d3e33c6-d8e6-4b51-92d6-dbe8bd9efb05')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2d3e33c6-d8e6-4b51-92d6-dbe8bd9efb05')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "2d3e33c6-d8e6-4b51-92d6-dbe8bd9efb05",
                "displayName": "(Preview) Anomalous Azure AD sign-in sessions",
                "enabled": true,
                "tactics": [
                    "InitialAccess"
                ],
                "anomalyVersion": "1.0.4",
                "techniques": [
                    "T1078",
                    "T1566",
                    "T1133"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": [
                        {
                            "supportedValues": [
                                "Fraction of failed signins",
                                "Number of failed signins",
                                "Failed signins to successful signins ratio",
                                "Number of signins with incorrect passwords",
                                "Incorrect passwords to correct passwords ratio",
                                "Fraction of incorrect password signins",
                                "Distinct number of app ids",
                                "Distinct number of client apps",
                                "Distinct number of ip addresses",
                                "Distinct number of opperating systems",
                                "Distinct number of browsers",
                                "Distinct number of cities",
                                "Distinct number of states",
                                "Distinct number of countries"
                            ],
                            "values": [
                                "Fraction of failed signins",
                                "Number of failed signins",
                                "Failed signins to successful signins ratio",
                                "Number of signins with incorrect passwords",
                                "Incorrect passwords to correct passwords ratio",
                                "Fraction of incorrect password signins",
                                "Distinct number of app ids",
                                "Distinct number of client apps",
                                "Distinct number of ip addresses",
                                "Distinct number of opperating systems",
                                "Distinct number of browsers",
                                "Distinct number of cities",
                                "Distinct number of states",
                                "Distinct number of countries"
                            ],
                            "supportedValuesKql": null,
                            "valuesKql": null,
                            "name": "Top reason for high anomaly score",
                            "description": "Include only anomalies where the top reason is one of these values.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0.0",
                            "maximum": "1.0",
                            "value": "0.5",
                            "name": "Score",
                            "description": "Generate an anomaly when the anomaly score is greater than or equal to the chosen value.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8595d264-2f64-442d-b293-4e16dffc9882')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8595d264-2f64-442d-b293-4e16dffc9882')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "8595d264-2f64-442d-b293-4e16dffc9882",
                "displayName": "(Preview) Anomalous Code Execution",
                "enabled": true,
                "tactics": [
                    "Execution"
                ],
                "anomalyVersion": "1.0.1",
                "techniques": [
                    "T1059"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0",
                            "name": "Anomaly score threshold",
                            "description": "Generate an anomaly when the anomaly score is greater than the chosen value.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2bb167bf-3951-435b-a932-8b03bfde0a2b')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2bb167bf-3951-435b-a932-8b03bfde0a2b')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "2bb167bf-3951-435b-a932-8b03bfde0a2b",
                "displayName": "(Preview) Anomalous scanning activity",
                "enabled": true,
                "tactics": [
                    "Discovery"
                ],
                "anomalyVersion": "1.0.3",
                "techniques": [
                    "T1046"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": [
                        {
                            "supportedValues": [
                                "accept",
                                "allow",
                                "start"
                            ],
                            "values": [
                                "accept",
                                "allow",
                                "start"
                            ],
                            "supportedValuesKql": null,
                            "valuesKql": null,
                            "name": "Device action",
                            "description": "Include only these specific device actions",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": [
                        {
                            "prioritize": null,
                            "exclude": "53,67,80,8080,123,137,138,443,445,3389",
                            "dataType": "string",
                            "name": "Exclude ports",
                            "description": "Provide a comma separated list to exclude specific ports from source data. This should be within double quotes, example: \"53, 67, 80, 8080, 123, 137, 138, 443, 445, 3389\"",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "thresholdObservations": [
                        {
                            "minimum": "1",
                            "maximum": "60000000",
                            "value": "600",
                            "name": "Destination IP count",
                            "description": "The minimum distinct destination IP count per hour required for inclusion. Default is 600. This is an OR condition with destination port count.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        },
                        {
                            "minimum": "1",
                            "maximum": "60000000",
                            "value": "600",
                            "name": "Destination port count",
                            "description": "The minimum distinct destination port count per hour required for inclusion. Default is 600. This is an OR condition with destination IP count.",
                            "sequenceNumber": 1,
                            "rerun": "RerunAlways"
                        },
                        {
                            "minimum": "0.00",
                            "maximum": "1.00",
                            "value": "1.00",
                            "name": "IP ratio",
                            "description": "The distinct source IP (always 1) to distinct destination IP count with a default minimum ratio of 1.00 or lower (converted to Base 10 to the -4 power of original value). This is an OR condition with port ratio.",
                            "sequenceNumber": 2,
                            "rerun": "RerunAlways"
                        },
                        {
                            "minimum": "0.00",
                            "maximum": "1.00",
                            "value": "1.00",
                            "name": "Port ratio",
                            "description": "The distinct source port to distinct destination port count with a default minimum ratio of 1.00 or lower (converted to Base 10 to the -4 power of original value). This is an OR condition with IP Ratio.",
                            "sequenceNumber": 3,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/16d55bbb-8c54-4c1d-8537-521824e76bb6')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/16d55bbb-8c54-4c1d-8537-521824e76bb6')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "16d55bbb-8c54-4c1d-8537-521824e76bb6",
                "displayName": "(Preview) Anomalous user activities in Office Exchange",
                "enabled": true,
                "tactics": [
                    "Collection",
                    "Persistence"
                ],
                "anomalyVersion": "1.0.2",
                "techniques": [
                    "T1114",
                    "T1213",
                    "T1098",
                    "T1136",
                    "T1137",
                    "T1505",
                    "T1078"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": [
                        {
                            "supportedValues": [
                                "Distinct number of operations",
                                "Distinct number of ClientInfoString",
                                "Distinct number of mailboxes",
                                "Number of operations",
                                "Distinct number of IP addresses",
                                "Distinct number of /24 subnets",
                                "Distinct number of /16 subnets",
                                "Number of MessageBind operations",
                                "Number of FolderBind operations",
                                "Number of UpdateInboxRules operations",
                                "Number of MailItemsAccessed operations"
                            ],
                            "values": [
                                "Distinct number of operations",
                                "Distinct number of ClientInfoString",
                                "Distinct number of mailboxes",
                                "Number of operations",
                                "Distinct number of IP addresses",
                                "Distinct number of /24 subnets",
                                "Distinct number of /16 subnets",
                                "Number of MessageBind operations",
                                "Number of FolderBind operations",
                                "Number of UpdateInboxRules operations",
                                "Number of MailItemsAccessed operations"
                            ],
                            "supportedValuesKql": null,
                            "valuesKql": null,
                            "name": "Top reason for high anomaly score",
                            "description": "Include only anomalies where the top reason is one of these values.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0.0",
                            "maximum": "1.0",
                            "value": "0.6",
                            "name": "Score",
                            "description": "Generate an anomaly when the anomaly score is greater than or equal to the chosen value.",
                            "sequenceNumber": 0,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8a12afde-ed27-46ac-a5ef-392e3d4f071f')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8a12afde-ed27-46ac-a5ef-392e3d4f071f')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "8a12afde-ed27-46ac-a5ef-392e3d4f071f",
                "displayName": "(Preview) Anomalous W3CIIS logs activity",
                "enabled": true,
                "tactics": [
                    "InitialAccess",
                    "Persistence"
                ],
                "anomalyVersion": "1.0.0",
                "techniques": [
                    "T1190",
                    "T1505"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": [
                        {
                            "supportedValues": [
                                "1",
                                "2",
                                "3"
                            ],
                            "supportedValuesKql": null,
                            "value": "3",
                            "name": "Number of reasons for anomalous activity",
                            "description": "Provide explanations for the specified number of reasons why a W3CIIS session is anomalous.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        },
                        {
                            "supportedValues": [
                                "Distinct number of methods",
                                "Distinct number of uri queries",
                                "Distinct number of uri stems",
                                "Distinct number of statuses",
                                "Distinct number of user agents",
                                "Total number of operations",
                                "Total number of http verbs",
                                "Total number of http statuses",
                                "None"
                            ],
                            "supportedValuesKql": null,
                            "value": "None",
                            "name": "Display anomalies for a specific top reason",
                            "description": "Display anomalies only where the top reason is specified in the checklist.",
                            "sequenceNumber": 1,
                            "rerun": "RerunAlways"
                        },
                        {
                            "supportedValues": [
                                "Public IPs",
                                "Private IPs",
                                "All IPs"
                            ],
                            "supportedValuesKql": null,
                            "value": "All IPs",
                            "name": "Display anomalies for public, private, or all IPs",
                            "description": "Choose to display anomalies for public, private, or all IPs.",
                            "sequenceNumber": 2,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "prioritizeExcludeObservations": [
                        {
                            "prioritize": null,
                            "exclude": null,
                            "dataType": "string",
                            "name": "Exclude client IPs from the anomalies generated",
                            "description": "Enter comma separated client IPs (prefixed client IP entities supported) that the anomalies should not display results for, in the exclude field.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "thresholdObservations": [
                        {
                            "minimum": "0.0",
                            "maximum": "1.0",
                            "value": "0.7",
                            "name": "Score",
                            "description": "Generate an anomaly when the anomaly score is greater than or equal to the chosen value.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/edc946ae-cba8-419f-8e90-309966895956')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/edc946ae-cba8-419f-8e90-309966895956')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "edc946ae-cba8-419f-8e90-309966895956",
                "displayName": "(Preview) Anomalous web request activity",
                "enabled": true,
                "tactics": [
                    "InitialAccess",
                    "Persistence"
                ],
                "anomalyVersion": "1.0.2",
                "techniques": [
                    "T1190",
                    "T1505"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": [
                        {
                            "supportedValues": [
                                "Include regularly repeating anomalies for URI stems",
                                "Exclude regularly repeating anomalies for URI stems"
                            ],
                            "supportedValuesKql": null,
                            "value": "Exclude regularly repeating anomalies for URI stems",
                            "name": "Handle regularly repeating anomalies for URI stems",
                            "description": "Choose to exclude URI stems that have been regularly occuring in the Anomalies table in Log Analytics.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "prioritizeExcludeObservations": [
                        {
                            "prioritize": ".asp, .aspx, .armx, .asax, .ashz, .asmx, .axd, .cshtml, .php, .phps, .php3, .php4, .php5, .php7, .jsp, .jspx, .cfm, .cfml, .phtml",
                            "exclude": null,
                            "dataType": "string",
                            "name": "Prioritize script suffixes of the URI stems",
                            "description": "Give comma separated script suffixes of the URI stems that should be included in the prioritize field.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        },
                        {
                            "prioritize": null,
                            "exclude": "",
                            "dataType": "string",
                            "name": "Exclude noisy URI stems",
                            "description": "Give comma separated URI stems that are frequently observing noisy sessions, and should be excluded from the Anomalies table in Log Analytics.",
                            "sequenceNumber": 1,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "thresholdObservations": [
                        {
                            "minimum": "0.0",
                            "maximum": "1.0",
                            "value": "0.2",
                            "name": "Score",
                            "description": "Generate an anomaly when the anomaly score is greater than or equal to the chosen value.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8a602940-4153-4045-a741-3bf15591ae29')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8a602940-4153-4045-a741-3bf15591ae29')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "8a602940-4153-4045-a741-3bf15591ae29",
                "displayName": "(Preview) Attempted computer bruteforce",
                "enabled": true,
                "tactics": [
                    "CredentialAccess"
                ],
                "anomalyVersion": "1.2.6",
                "techniques": [
                    "T1110"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.4",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 1,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ffe3625d-a933-4f63-b192-7e6ebf3be5fb')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ffe3625d-a933-4f63-b192-7e6ebf3be5fb')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "ffe3625d-a933-4f63-b192-7e6ebf3be5fb",
                "displayName": "(Preview) Attempted user account bruteforce",
                "enabled": true,
                "tactics": [
                    "CredentialAccess"
                ],
                "anomalyVersion": "1.2.6",
                "techniques": [
                    "T1110"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.1",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 1,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/93c4b361-ea7d-40f4-9ca6-e501cdef9c53')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/93c4b361-ea7d-40f4-9ca6-e501cdef9c53')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "93c4b361-ea7d-40f4-9ca6-e501cdef9c53",
                "displayName": "(Preview) Attempted user account bruteforce per failure reason",
                "enabled": true,
                "tactics": [
                    "CredentialAccess"
                ],
                "anomalyVersion": "1.1.4",
                "techniques": [
                    "T1110"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": [
                        {
                            "supportedValues": [
                                "\\%%2305-The specified user account has expired",
                                "\\%%2309-The specified account's password has expired",
                                "\\%%2310-Account currently disabled",
                                "\\%%2311-Account logon time restriction violation",
                                "\\%%2312-User not allowed to logon at this computer",
                                "\\%%2313-Unknown user name or bad password",
                                "\\%%2307-Account locked out",
                                "\\%%2304-An Error occurred during Logon"
                            ],
                            "values": [
                                "\\%%2305-The specified user account has expired",
                                "\\%%2309-The specified account's password has expired",
                                "\\%%2310-Account currently disabled",
                                "\\%%2311-Account logon time restriction violation",
                                "\\%%2312-User not allowed to logon at this computer",
                                "\\%%2313-Unknown user name or bad password",
                                "\\%%2307-Account locked out",
                                "\\%%2304-An Error occurred during Logon"
                            ],
                            "supportedValuesKql": null,
                            "valuesKql": null,
                            "name": "Failure Reasons",
                            "description": "Include only selected failure reasons in anomaly results.",
                            "sequenceNumber": 0,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.3",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 1,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c097bfdb-8b4b-4a98-b74d-1871ffd50a03')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c097bfdb-8b4b-4a98-b74d-1871ffd50a03')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "c097bfdb-8b4b-4a98-b74d-1871ffd50a03",
                "displayName": "(Preview) Attempted user account bruteforce per logon type",
                "enabled": true,
                "tactics": [
                    "CredentialAccess"
                ],
                "anomalyVersion": "1.0.4",
                "techniques": [
                    "T1110"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": [
                        {
                            "supportedValues": [
                                "2-Interactive",
                                "3-Network",
                                "4-Batch",
                                "5-Service",
                                "7-Unlock",
                                "8-NetworkCleartext",
                                "9-NewCredentials",
                                "10-RemoteInteractive",
                                "11-CachedInteractive"
                            ],
                            "values": [
                                "2-Interactive",
                                "3-Network",
                                "4-Batch",
                                "5-Service",
                                "7-Unlock",
                                "8-NetworkCleartext",
                                "9-NewCredentials",
                                "10-RemoteInteractive",
                                "11-CachedInteractive"
                            ],
                            "supportedValuesKql": null,
                            "valuesKql": null,
                            "name": "Logon Types",
                            "description": "Include only selected logon types in anomaly results.",
                            "sequenceNumber": 0,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.03",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 1,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/622844c2-fc11-4efc-91e6-c05b06ab3008')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/622844c2-fc11-4efc-91e6-c05b06ab3008')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "622844c2-fc11-4efc-91e6-c05b06ab3008",
                "displayName": "(Preview) Detect machine generated network beaconing behavior",
                "enabled": true,
                "tactics": [
                    "CommandAndControl"
                ],
                "anomalyVersion": "1.0.5",
                "techniques": [
                    "T1001",
                    "T1008",
                    "T1071",
                    "T1090",
                    "T1095",
                    "T1102",
                    "T1104",
                    "T1132",
                    "T1205",
                    "T1568",
                    "T1571",
                    "T1572",
                    "T1573"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "10",
                            "maximum": "1000",
                            "value": "25",
                            "name": "Degree of source IPs",
                            "description": "Suppress anomalies when degree of source IPs is greater than the chosen value",
                            "sequenceNumber": 1,
                            "rerun": "RerunAlways"
                        },
                        {
                            "minimum": "10",
                            "maximum": "1000",
                            "value": "30",
                            "name": "Daily event count threshold",
                            "description": "Suppress anomalies when daily event count is less than the chosen value",
                            "sequenceNumber": 2,
                            "rerun": "RerunAlways"
                        },
                        {
                            "minimum": "10",
                            "maximum": "1000",
                            "value": "60",
                            "name": "Time delta threshold in seconds",
                            "description": "Suppress anomalies when time delta in seconds between network connections is less than the chosen value",
                            "sequenceNumber": 3,
                            "rerun": "RerunAlways"
                        },
                        {
                            "minimum": "50",
                            "maximum": "100",
                            "value": "75",
                            "name": "Percent beaconing threshold",
                            "description": "Generate an anomaly when percent beaconing is greater than the chosen value",
                            "sequenceNumber": 4,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b783df9c-4088-452e-a791-0c4fca47a109')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b783df9c-4088-452e-a791-0c4fca47a109')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "b783df9c-4088-452e-a791-0c4fca47a109",
                "displayName": "(Preview) Domain generation algorithm (DGA) on DNS domains",
                "enabled": true,
                "tactics": [
                    "CommandAndControl"
                ],
                "anomalyVersion": "1.0.4",
                "techniques": [
                    "T1568"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": [
                        {
                            "prioritize": null,
                            "exclude": ".lan, .home",
                            "dataType": "string",
                            "name": "Top level domain",
                            "description": "Give comma separated TLDs to exclude from source data within double quotes, example: \".lan, .home\"",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "thresholdObservations": [
                        {
                            "minimum": "0.0",
                            "maximum": "1.0",
                            "value": "0.9",
                            "name": "Score",
                            "description": "Generate an anomaly when the anomaly score is greater than or equal to the chosen value.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d4f9d54b-6dec-4655-8631-0fa8d4954fea')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d4f9d54b-6dec-4655-8631-0fa8d4954fea')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "d4f9d54b-6dec-4655-8631-0fa8d4954fea",
                "displayName": "(Preview) Domain Reputation Palo Alto anomaly",
                "enabled": true,
                "tactics": [
                    "CommandAndControl"
                ],
                "anomalyVersion": "1.0.3",
                "techniques": [
                    "T1568"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.99",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/23850aa1-37d3-4b4b-9f39-4ebf5feb59fd')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/23850aa1-37d3-4b4b-9f39-4ebf5feb59fd')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "23850aa1-37d3-4b4b-9f39-4ebf5feb59fd",
                "displayName": "(Preview) Excessive data transfer anomaly",
                "enabled": true,
                "tactics": [
                    "Exfiltration"
                ],
                "anomalyVersion": "1.0.5",
                "techniques": [
                    "T1011",
                    "T1029",
                    "T1030",
                    "T1041",
                    "T1011",
                    "T1537",
                    "T1567"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": [
                        {
                            "supportedValues": [
                                "Akamai",
                                "Aruba Networks",
                                "Check Point",
                                "Dell",
                                "Forcepoint",
                                "Fortinet",
                                "McAfee",
                                "Palo Alto Networks",
                                "SonicWall",
                                "Trend Micro",
                                "Vectra Networks",
                                "Zscaler"
                            ],
                            "supportedValuesKql": null,
                            "value": "Palo Alto Networks",
                            "name": "Device vendor",
                            "description": "Select device vendor reporting network connection logs to CommonSecurityLog",
                            "sequenceNumber": 1,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "1",
                            "maximum": "10000",
                            "value": "1",
                            "name": "Hourly data transfer threshold in MB",
                            "description": "Suppress anomalies when hourly data transfered (in MB) per hour is less than the chosen value",
                            "sequenceNumber": 1,
                            "rerun": "RerunAlways"
                        },
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": ".98",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 2,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/06107abb-1b68-4fdc-841b-8a1ff9301467')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/06107abb-1b68-4fdc-841b-8a1ff9301467')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "06107abb-1b68-4fdc-841b-8a1ff9301467",
                "displayName": "(Preview) Excessive Downloads via Palo Alto GlobalProtect",
                "enabled": true,
                "tactics": [
                    "Exfiltration"
                ],
                "anomalyVersion": "1.0.6",
                "techniques": [
                    "T1030",
                    "T1041",
                    "T1011",
                    "T1567",
                    "T1029",
                    "T1537"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.87",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 0,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d0bd9611-2fc1-42cb-af4e-793b6f28ba92')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d0bd9611-2fc1-42cb-af4e-793b6f28ba92')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "d0bd9611-2fc1-42cb-af4e-793b6f28ba92",
                "displayName": "(Preview) Excessive upload via Palo Alto GlobalProtect",
                "enabled": true,
                "tactics": [
                    "Exfiltration"
                ],
                "anomalyVersion": "1.0.6",
                "techniques": [
                    "T1030",
                    "T1041",
                    "T1011",
                    "T1567",
                    "T1029",
                    "T1537"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.87",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 0,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8546330c-e1fb-422a-9388-5c09e9a8f4ca')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8546330c-e1fb-422a-9388-5c09e9a8f4ca')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "8546330c-e1fb-422a-9388-5c09e9a8f4ca",
                "displayName": "(Preview) Login from an unusual region via Palo Alto GlobalProtect account logins",
                "enabled": true,
                "tactics": [
                    "InitialAccess",
                    "CredentialAccess",
                    "LateralMovement"
                ],
                "anomalyVersion": "1.0.0",
                "techniques": [
                    "T1133"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.8",
                            "name": "Score",
                            "description": "Generate an anomaly when a region rarity score is less than the threshold.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        },
                        {
                            "minimum": "2",
                            "maximum": "100",
                            "value": "100",
                            "name": "Minimum users per region",
                            "description": "whitelist an anomaly if the number of users from a rare region is greater than this limit.",
                            "sequenceNumber": 1,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/03401f05-5c45-4f2d-9295-092764090e02')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/03401f05-5c45-4f2d-9295-092764090e02')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "03401f05-5c45-4f2d-9295-092764090e02",
                "displayName": "(Preview) Multi-region logins in a single day via Palo Alto GlobalProtect",
                "enabled": true,
                "tactics": [
                    "InitialAccess",
                    "DefenseEvasion"
                ],
                "anomalyVersion": "2.0.0",
                "techniques": [
                    "T1078"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": [
                        {
                            "supportedValues": [
                                "Yes",
                                "No"
                            ],
                            "supportedValuesKql": null,
                            "value": "Yes",
                            "name": "Use region adjacency",
                            "description": "Suppress anomalies originated from two adjacent regions.",
                            "sequenceNumber": 1,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "2",
                            "maximum": "10",
                            "value": "2",
                            "name": "Minimum daily regions for anomaly",
                            "description": "Generate an anomaly when a user logs in from this many or more regions in a day",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/25bf2f45-1cf0-47d2-b394-a7b331d707b3')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/25bf2f45-1cf0-47d2-b394-a7b331d707b3')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "25bf2f45-1cf0-47d2-b394-a7b331d707b3",
                "displayName": "(Preview) Suspicious geography change in Palo Alto GlobalProtect account logins",
                "enabled": true,
                "tactics": [
                    "InitialAccess"
                ],
                "anomalyVersion": "2.0.0",
                "techniques": [
                    "T1133",
                    "T1078"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": [
                        {
                            "supportedValues": [
                                "Yes",
                                "No"
                            ],
                            "supportedValuesKql": null,
                            "value": "Yes",
                            "name": "Use region adjacency",
                            "description": "Suppress anomalies originated from two adjacent regions.",
                            "sequenceNumber": 0,
                            "rerun": "RerunAlways"
                        },
                        {
                            "supportedValues": [
                                "Yes",
                                "No"
                            ],
                            "supportedValuesKql": null,
                            "value": "No",
                            "name": "Check for matching device",
                            "description": "Suppress anomalies which are originated from the same device.",
                            "sequenceNumber": 1,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": null,
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/543c9254-eb6f-4fdd-858d-783e0e3d5cb9')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/543c9254-eb6f-4fdd-858d-783e0e3d5cb9')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "543c9254-eb6f-4fdd-858d-783e0e3d5cb9",
                "displayName": "(Preview) Suspicious number of protected documents accessed",
                "enabled": true,
                "tactics": [
                    "Collection"
                ],
                "anomalyVersion": "1.0.3",
                "techniques": [
                    "T1530",
                    "T1213",
                    "T1005",
                    "T1039",
                    "T1114"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": [
                        {
                            "prioritize": null,
                            "exclude": ".msg,.jpg,.txt",
                            "dataType": "string",
                            "name": "File extension",
                            "description": "Give comma separated file extension to exclude from source data, for example: .txt,.jpg,.mp4",
                            "sequenceNumber": 2,
                            "rerun": "RerunAlways"
                        }
                    ],
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.9",
                            "name": "Score",
                            "description": "Generate an anomaly when the error percentile is greater than chosen value",
                            "sequenceNumber": 1,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/30dea201-74da-4141-8d21-8a18f0861d60')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/30dea201-74da-4141-8d21-8a18f0861d60')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "30dea201-74da-4141-8d21-8a18f0861d60",
                "displayName": "(Preview) Suspicious volume of AWS cloud trail logs events of group user account by EventTypeName",
                "enabled": true,
                "tactics": [
                    "InitialAccess"
                ],
                "anomalyVersion": "1.0.1",
                "techniques": [
                    "T1078"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.02",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 1,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b40a7a5b-5d39-46fe-a79e-2acdb38e1ce7')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b40a7a5b-5d39-46fe-a79e-2acdb38e1ce7')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "b40a7a5b-5d39-46fe-a79e-2acdb38e1ce7",
                "displayName": "(Preview) Suspicious volume of failed login attempts to AWS Console by each group user account",
                "enabled": true,
                "tactics": [
                    "InitialAccess"
                ],
                "anomalyVersion": "1.0.0",
                "techniques": [
                    "T1078"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.01",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 1,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e7277475-4e31-41c7-9997-0b8b3d7f00cd')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e7277475-4e31-41c7-9997-0b8b3d7f00cd')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "e7277475-4e31-41c7-9997-0b8b3d7f00cd",
                "displayName": "(Preview) Suspicious volume of failed login attempts to AWS Console by each source IP address",
                "enabled": true,
                "tactics": [
                    "InitialAccess"
                ],
                "anomalyVersion": "1.0.0",
                "techniques": [
                    "T1078"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.01",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 1,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9c712bb2-08dc-44d3-b66b-af154dfc1c4f')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9c712bb2-08dc-44d3-b66b-af154dfc1c4f')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "9c712bb2-08dc-44d3-b66b-af154dfc1c4f",
                "displayName": "(Preview) Suspicious volume of logins to computer",
                "enabled": true,
                "tactics": [
                    "InitialAccess"
                ],
                "anomalyVersion": "1.2.6",
                "techniques": [
                    "T1078"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.07",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 1,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9c27cee8-0a33-4abe-8683-212c0a98fc28')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9c27cee8-0a33-4abe-8683-212c0a98fc28')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Anomaly",
            "apiVersion": "2021-03-01-preview",
            "properties": {
                "alertRuleTemplateName": "9c27cee8-0a33-4abe-8683-212c0a98fc28",
                "displayName": "(Preview) Suspicious volume of logins to computer with elevated token",
                "enabled": true,
                "tactics": [
                    "InitialAccess"
                ],
                "anomalyVersion": "1.0.4",
                "techniques": [
                    "T1078"
                ],
                "frequency": "P1D",
                "ruleStatus": "Production",
                "isDefaultRule": true,
                "anomalyRuleVersion": 0,
                "customizableObservations": {
                    "multiSelectObservations": null,
                    "singleSelectObservations": null,
                    "prioritizeExcludeObservations": null,
                    "thresholdObservations": [
                        {
                            "minimum": "0",
                            "maximum": "1",
                            "value": "0.1",
                            "name": "Score",
                            "description": "Generate an anomaly when score is greater than the chosen value",
                            "sequenceNumber": 1,
                            "rerun": "NotRequired"
                        }
                    ],
                    "singleValueObservations": null
                }
            }
        }
    
    ,
    "outputs": {}
}
